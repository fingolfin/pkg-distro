gap> 
gap> # distance between elements
gap> g := ElementaryAbelianGroup(27);
<pc group of size 27 with 3 generators>
gap> flist1 := [ Group(g.1), Group(g.2), Group(g.3), Group(g.1*g.2*g.3) ];;
gap> flist2 := [ Group([g.1, g.2^2*g.3]), Group([g.2, g.1^2*g.3 ]),
>             Group([g.3, g.1^2*g.2]), Group([g.1^2*g.2, g.1^2*g.3 ]) ];;
gap> egq := EGQByKantorFamily(g, flist1, flist2);
<EGQ of order [ 3, 3 ] and basepoint 0>
gap> p := Random(Points(egq));
<a point of class 2 of <EGQ of order [ 3, 3 ] and basepoint 0>>
gap> q := Random(Points(egq));
<a point of class 3 of <EGQ of order [ 3, 3 ] and basepoint 0>>
gap> DistanceBetweenElements(p,q);
2
gap> gh := SplitCayleyHexagon(3);
H(3)
gap> l := Random(Lines(gh));
#I  for Split Cayley Hexagon
#I  Computing nice monomorphism...
#I  Found permutation domain...
<a line in H(3)>
gap> m := First(Lines(gh),x->DistanceBetweenElements(l,x)=6);
<a line in H(3)>
gap> quit;
