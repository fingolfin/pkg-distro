<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Caches">
<Heading>Caches</Heading>

<Section Label="Chapter_Caches_Section_Object_constructors">
<Heading>Object constructors</Heading>

Caches are objects which store for a fixed number of keys
a value, so they are a map Obj^k -> Obj, while the k is
fixed. A cache ususally stores the result in a weak pointer
list, which means that if the value which the cache should store
is not referenced in the system anymore, it will not be remembered
by the cache. However, caches can be set to store the value permanently (crisp),
or not to store any new value at all (inaktive). In that case, already stored values
are still in the cache and can be accessed once the cache is set active again.
<ManSection Label="AutoDoc_generated_group1">
  <Oper Arg="[k],[is_crisp]" Name="CachingObject" Label="for "/>
  <Oper Arg="arg" Name="CachingObject" Label="for IsObject"/>
  <Oper Arg="arg1,arg2" Name="CachingObject" Label="for IsObject, IsObject"/>
 <Returns>a cache
</Returns>
 <Description>
If no argument is given, the function returns a weak cache with key length one,
if an integer k is given, a weak cache with key length k, and if the bool is_crisp
is true, a crisp cache with the corresponding length.
<Br/>
 </Description>
</ManSection>


<ManSection Label="AutoDoc_generated_group2">
  <Oper Arg="object, cache_name, length, [is_crisp]" Name="CachingObject" Label="for IsObject, IsObject, IsInt"/>
  <Oper Arg="arg1,arg2,arg3,arg4" Name="CachingObject" Label="for IsObject, IsObject, IsInt, IsBool"/>
 <Returns></Returns>
 <Description>
This methods are not installed, they serve as an interface
for InstallMethodWithCacheFromObject.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Caches_Section_Setters,_getters">
<Heading>Setters, getters</Heading>

<ManSection>
  <Oper Arg="cache, key" Name="CacheValue" Label="for IsCachingObject, IsObject"/>
 <Returns>stored value
</Returns>
 <Description>
If there is a value stored in the cache for key, which can be a single key for
caches with key length one or a list of keys depending on the key length of the cache,
this method returns the value, otherwise SuPeRfail.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="cache, key, value" Name="SetCacheValue" Label="for IsCachingObject, IsObject, IsObject"/>
 <Returns></Returns>
 <Description>
Sets the value of key of the cache to value.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="obj1, obj2" Name="IsEqualForCache" Label="for IsObject, IsObject"/>
 <Returns>true or false
</Returns>
 <Description>
This function is used to compare objects for the caches.
The standard way is IsIdenticalObj, and lists are compared recursive
with this function. It is possible and recommended to overload this function as needed.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Caches_Section_Managing_functions">
<Heading>Managing functions</Heading>

<ManSection Label="AutoDoc_generated_group3">
  <Func Arg="cache" Name="SetCachingObjectCrisp" />
  <Func Arg="arg" Name="SetCachingObjectWeak" />
  <Func Arg="arg" Name="DeactivateCachingObject" />
  <Func Arg="Like InstallMethod" Name="InstallMethodWithCache" />
  <Func Arg="arg" Name="InstallMethodWithCrispCache" />
  <Func Arg="Like InstallMethod" Name="InstallMethodWithCacheFromObject" />
  <Func Arg="func" Name="FunctionWithCache" />
  <Oper Arg="indicator, objects, attributes" Name="ToDoListEntryToMaintainEqualAttributes" Label="for IsList, IsList, IsList"/>
  <Oper Arg="indicator, objects, attributes" Name="ToDoListEntryToMaintainFollowingAttributes" Label="for IsList, IsList, IsList"/>
  <Oper Arg="source, target_list" Name="ToDoListEntry" Label="for IsList, IsList"/>
  <Var Name="ToDoList_this_object" />
  <Oper Arg="filter, indicator, objects, attributes" Name="ToDoListEntryToMaintainEqualAttributesBlueprint" Label="for IsObject, IsList, IsList, IsList"/>
  <Oper Arg="arg1,arg2,arg3,arg4" Name="ToDoListEntryToMaintainFollowingAttributesBlueprint" Label="for IsObject, IsList, IsList, IsList"/>
  <Oper Arg="arg1,arg2,arg3" Name="ToDoListEntryBlueprint" Label="for IsObject, IsList, IsList"/>
  <Oper Arg="E" Name="AddToToDoList" Label="for IsToDoListEntry"/>
  <Oper Arg="entry" Name="SourcePart" Label="for IsToDoListEntry"/>
  <Oper Arg="entry" Name="TargetPart" Label="for IsToDoListEntry"/>
  <Oper Arg="arg" Name="ProcessAToDoListEntry" Label="for IsToDoListEntry"/>
  <Oper Arg="arg1,arg2,arg3,arg4" Name="ToDoListEntry" Label="for IsList, IsObject, IsString, IsObject"/>
  <Oper Arg="arg1,arg2" Name="ToDoListEntry" Label="for IsList, IsFunction"/>
  <Oper Arg="entry,value" Name="SetTargetValueObject" Label="for IsToDoListEntry, IsObject"/>
  <Oper Arg="entry,obj" Name="SetTargetObject" Label="for IsToDoListEntry, IsObject"/>
  <Oper Arg="sobj,source_prop,sval,tobj,target,tval" Name="ToDoListEntryWithContraposition" Label="for IsObject, IsString, IsBool, IsObject, IsString, IsBool"/>
  <Attr Arg="arg" Name="DescriptionOfImplication" Label="for IsToDoListEntry"/>
  <Oper Arg="arg1,arg2,arg3,arg4" Name="ToDoListEntryForEqualAttributes" Label="for IsObject, IsString, IsObject, IsString"/>
  <Oper Arg="arg1,arg2,arg3,arg4,arg5,arg6" Name="ToDoListEntryForEquivalentAttributes" Label="for IsObject, IsString, IsObject, IsObject, IsString, IsObject"/>
  <Filt Arg="arg" Name="IsToDoList" Label="for IsObject"/>
  <Oper Arg="arg" Name="NewToDoList" Label="for "/>
  <Func Arg="arg" Name="Process_A_ToDo_List_Entry" />
  <Attr Arg="arg" Name="ToDoList" Label="for IsObject"/>
  <Attr Arg="A" Name="ProcessToDoList" Label="for IsObject"/>
  <Oper Arg="obj,name,val" Name="TraceProof" Label="for IsObject, IsString, IsObject"/>
  <Oper Arg="arg" Name="ActivateToDoList" Label="for IsObject"/>
  <Oper Arg="arg" Name="ActivateToDoList" Label="for "/>
  <Oper Arg="arg" Name="DeactivateToDoList" Label="for IsObject"/>
  <Oper Arg="arg" Name="DeactivateToDoList" Label="for "/>
  <Func Arg="arg" Name="ActivateWhereInfosInEntries" />
  <Func Arg="arg" Name="DeactivateWhereInfosInEntries" />
  <Var Name="HOMALG_TOOLS" />
  <Filt Arg="arg" Name="IsStructureObjectOrObjectOrMorphism" Label="for IsAttributeStoringRep"/>
  <Filt Arg="arg" Name="IsStructureObjectOrObject" Label="for IsStructureObjectOrObjectOrMorphism"/>
  <Filt Arg="arg" Name="IsStructureObject" Label="for IsStructureObjectOrObject"/>
  <Filt Arg="arg" Name="IsStructureObjectMorphism" Label="for IsAttributeStoringRep"/>
  <Filt Arg="arg" Name="IsHomalgRingOrModule" Label="for IsStructureObjectOrObject"/>
  <Filt Arg="arg" Name="IsContainerForWeakPointers" Label="for IsComponentObjectRep"/>
  <Filt Arg="arg" Name="IsContainerForPointers" Label="for IsComponentObjectRep"/>
  <Func Arg="arg" Name="ContainerForWeakPointers" />
  <Func Arg="arg" Name="homalgTotalRuntimes" />
  <Func Arg="arg" Name="AddLeftRightLogicalImplicationsForHomalg" />
  <Func Arg="arg" Name="LogicalImplicationsForOneHomalgObject" />
  <Func Arg="arg" Name="LogicalImplicationsForTwoHomalgBasicObjects" />
  <Func Arg="arg" Name="InstallLogicalImplicationsForHomalgBasicObjects" />
  <Func Arg="arg" Name="LeftRightAttributesForHomalg" />
  <Func Arg="arg" Name="InstallLeftRightAttributesForHomalg" />
  <Func Arg="arg" Name="MatchPropertiesAndAttributes" />
  <Func Arg="arg" Name="InstallImmediateMethodToPullPropertyOrAttribute" />
  <Func Arg="arg" Name="InstallImmediateMethodToConditionallyPullPropertyOrAttribute" />
  <Func Arg="arg" Name="InstallImmediateMethodToPullPropertyOrAttributeWithDifferentName" />
  <Func Arg="arg" Name="InstallImmediateMethodToPullPropertiesOrAttributes" />
  <Func Arg="arg" Name="InstallImmediateMethodToPullTrueProperty" />
  <Func Arg="arg" Name="InstallImmediateMethodToConditionallyPullTrueProperty" />
  <Func Arg="arg" Name="InstallImmediateMethodToPullTruePropertyWithDifferentName" />
  <Func Arg="arg" Name="InstallImmediateMethodToPullTrueProperties" />
  <Func Arg="arg" Name="InstallImmediateMethodToPullFalseProperty" />
  <Func Arg="arg" Name="InstallImmediateMethodToConditionallyPullFalseProperty" />
  <Func Arg="arg" Name="InstallImmediateMethodToPullFalsePropertyWithDifferentName" />
  <Func Arg="arg" Name="InstallImmediateMethodToPullFalseProperties" />
  <Func Arg="arg" Name="InstallImmediateMethodToPushPropertyOrAttribute" />
  <Func Arg="arg" Name="InstallImmediateMethodToConditionallyPushPropertyOrAttribute" />
  <Func Arg="arg" Name="InstallImmediateMethodToPushPropertyOrAttributeWithDifferentName" />
  <Func Arg="arg" Name="InstallImmediateMethodToPushPropertiesOrAttributes" />
  <Func Arg="arg" Name="InstallImmediateMethodToPushTrueProperty" />
  <Func Arg="arg" Name="InstallImmediateMethodToPushTruePropertyWithDifferentName" />
  <Func Arg="arg" Name="InstallImmediateMethodToPushTrueProperties" />
  <Func Arg="arg" Name="InstallImmediateMethodToPushFalseProperty" />
  <Func Arg="arg" Name="InstallImmediateMethodToPushFalsePropertyWithDifferentName" />
  <Func Arg="arg" Name="InstallImmediateMethodToPushFalseProperties" />
  <Func Arg="arg" Name="DeclareAttributeWithCustomGetter" />
  <Func Arg="arg" Name="AppendToAhomalgTable" />
  <Func Arg="arg" Name="homalgNamesOfComponentsToIntLists" />
  <Func Arg="arg" Name="IncreaseExistingCounterInObject" />
  <Func Arg="arg" Name="IncreaseExistingCounterInObjectWithTiming" />
  <Func Arg="arg" Name="IncreaseCounterInObject" />
  <Func Arg="arg" Name="MemoryToString" />
  <Func Arg="n, p" Name="PrimePowerExponent" />
  <Oper Arg="L" Name="ViewList" Label="for IsList"/>
  <Oper Arg="arg" Name="homalgLaTeX" Label="for IsObject"/>
  <Oper Arg="arg" Name="ExamplesForHomalg" Label="for "/>
  <Oper Arg="arg" Name="ExamplesForHomalg" Label="for IsInt"/>
  <Oper Arg="arg" Name="UpdateContainerOfWeakPointers" Label="for IsContainerForWeakPointers"/>
  <Func Arg="arg" Name="_AddElmWPObj_ForHomalg" />
  <Func Arg="arg" Name="_AddTwoElmWPObj_ForHomalg" />
  <Oper Arg="arg1,arg2,arg3" Name="_ElmWPObj_ForHomalg" Label="for IsContainerForWeakPointers, IsObject, IsObject"/>
  <Func Arg="arg" Name="ContainerForPointers" />
  <Oper Arg="arg" Name="UpdateContainerOfPointers" Label="for IsContainerForPointers"/>
  <Func Arg="arg" Name="_AddElmPObj_ForHomalg" />
  <Func Arg="arg" Name="_AddTwoElmPObj_ForHomalg" />
  <Oper Arg="arg1,arg2,arg3" Name="_ElmPObj_ForHomalg" Label="for IsContainerForPointers, IsObject, IsObject"/>
  <Func Arg="function, args" Name="TOOLS_FOR_HOMALG_GET_REAL_TIME_OF_FUNCTION_CALL" />
  <Filt Arg="arg" Name="IsTree" Label="for IsObject"/>
  <Attr Arg="arg" Name="Content" Label="for IsTree"/>
  <Oper Arg="arg" Name="ListOfSuccessors" Label="for IsTree"/>
  <Oper Arg="arg" Name="Predecessor" Label="for IsTree"/>
  <Oper Arg="arg" Name="ListOfSentinels" Label="for IsTree"/>
  <Oper Arg="arg" Name="RemoveHead" Label="for IsTree"/>
  <Oper Arg="arg" Name="Tree" Label="for "/>
  <Oper Arg="obj" Name="Tree" Label="for IsObject"/>
  <Oper Arg="tree,new_tree" Name="Add" Label="for IsTree, IsTree"/>
  <Oper Arg="sent" Name="ContentListFromSentinelToHead" Label="for IsTree"/>
  <Oper Arg="arg" Name="PostOrder" Label="for IsTree"/>
 <Returns>nothing
</Returns>
 <Description>
Sets the caching to crisp, weak, or deativates the cache completely.
<Br/>
<Br/>
Installs a method like InstallMethod, but additionally puts a cache layer around it
so that the result is cached. It is possible to give the cache as the option Cache,
to use the same cache for more than one method or store it somewhere to have access to
the cache.
Like InstallMethodWithCache, but with a crisp cache.
This works just like InstallMethodWithCache, but it extracts
the cache via the CachingObject method from one of its arguments.
The CachingObject must then be implemented for one of the arguments,
and the option ArgumentNumber can specify which option to be used.
As second argument for CachingObject a string is used, which can identify
the cache. Standard is the name of the operation, for which the method is
installed, but it can be specified using the CacheName option.
Creates a cached function out of a given function <A>func</A>.
If the option Cache is a cache, this cache is used. If the option
Cache is the string crisp, a crisp cache is used. All other values for this option
lead to a single weak cache.
The first argument is the <A>indicator</A>.
It is a list of sources like in ToDoListEntry.
Each entry <A>SP</A> has to be a threetuple.
First entry of <A>SP</A> has to an object, for
which the second entry of <A>SP</A>, which has
to be the name of an attribute, must become known.
Once the attribute is known to the object,
it will be compared to the third entry of the list.
This can be a value, which is compared directly
a function, which is launched and its return value is compared,
or a list, consisting of a function and arguments, so the
return value of the function with given arguments is compared.
If there is no third entry in <A>SP</A>, it is only looked
up if the value is known. Once all entries in <A>indicator</A>
are processed like this, and all returned true in the comparasion,
a list of ToDoListEntryForEqualAttributes is installed.
They are installed for the two entries of the list <A>objects</A>
which can either be the objects itself or a list
containing a function and arguments, which return
value is used. For each entry in <A>attributes</A> such
an entry is installed. Such an entry can be the
name of an attribute, if both objects
in <A>objects</A> should share the value
between attributes with the same name, or a list
of two names, if the attributes do not have
the same name.
This function creates a ToDoListEntry which can
install several ToDoListEntries.
The first two arguments, <A>indicator</A> and <A>objects</A>
except that there will be only ToDoListEntries
installed between the two objects in <A>objects</A>.
Each entry in <A>attributes</A> can either be a string
which means that the attribute with the given name will be set
from the first to the second object in <A>objects</A>
once it is known.
The third argument <A>attributes</A> is a list of attributes
that will be propagated by ToDoListEntries.
Each entry <A>TP</A> can either be a list consisting of
a DescriptionOfImplication string and one of the following
or just one of the following lists:
It can be a string, which means that the Attribute
with the given name will be propagated from the first to
the second object.
It can be a list, consisting of two entries, where the first entry
is a list of sources like in ToDoListEntry
and the second might be a function
which will be launched once the first part is fulfilled.
It can also be a threetuple which will serve
as second to fourth argument of ToDoListEntry.
Or it can be a string, which will set the attribute named
like this of the first object to the one named in the second object
This function allows to create more than one
ToDoListEntry with identical list of sources at one time.
First argument is a list of sources like in the other ToDoListEntry functions
Second argument is a list of threetuples,
which serve as second to fourth argument of ToDoListEntry
or a function, which serves as second argument for ToDoListEntry
or a tuple with a description string and one of the above.
Represents the objects for which the blueprint is
created in the arguments
This function installs an immediate method
which can install ToDoListEntryToMaintainEqualAttributes.
First argument must be a filter, and once the filter becomes true
the ToDoListEntryToMaintainEqualAttributes is
installed with the second to fourth argument
as first to third.
In those attributes, at any point,
the variable ToDoList_this_object
can be used. When the entry is installed
This will be replaced with the object to which the
filters became known, i.e. the one which triggered the
immediate method.
The same as ToDoListEntryToMaintainEqualAttributesBlueprint
for ToDoListEntryToMaintainFollowingAttributes
The same as ToDoListEntryToMaintainEqualAttributesBlueprint
for ToDoListEntry
Adds the ToDo-list entry <A>E</A> to the
ToDo-lists of it's source objects and creates a new one, if this is needed.
This function might be called with lists of entries
Returns the a list of source parts of the ToDo-list entry <A>entry</A>.
This is a triple of an object, a name of a filter/attribute, and a value to which
the attribute has to be set to activate the entry
Returns the target part of the ToDo-list entry <A>entry</A>.
This is a triple of an object, a name of a filter/attribute, and a value to which the
specific filter/attribute should be set.
The third entry of the list might also be a function to which return value the
attribute is set.
Processes a ToDo-list entry, i.e. sets the information given in TargetPart
if the definitions in SourcePart are fulfilled.
Returns a function if the entry could be processed, false if not, and fail if
SourcePart or TargetPart weren't availible anymore.
The first argument must be a list consisting of two, three or four-tuples
where the first entry must be the object to which the attribute
given as a string in the second entry must be known to process this entry.
The second entry can also be a list of strings, in that case all the
attributes given as names must be known.
Also, in this case, only two entries in this tuple are allowed.
The third part can be a value or a list, consisting of a function followed
by arguments which will be computed by the time the attribute given
as second entry becomes known to the first entry.
If the second part is only a string, and there is a third entry in the tuple
the attribute is compared to the third entry.
One can set a comparating function as fourth entry, which must
take two entries and return false or true.
If the value of the attribute matches the (computed)
value in the third entry for all members of the list in the first argument
the attribute given as third argument, also by name, of the second argument
is set to the value of the fourth argument.
This can also be a list which has to be computed, or a function,
which retun value is used in this case.
The first argument is a list of three-tubles like above.
Once all preconditions become fulfilled
the function given as second argument is launched.
If the given value of the target part is the return value of a function
this command sets the target value of the entry to a function.
This is done to keep proof tracking availible.
If the target object, i.e. the first entry of the target part, was given as
a function, this method can set this entry to the return value computed in
ProcessToDoListEntry. This happens atomatically, do not worry about it.
Creates a ToDoListEntry which also installs a contraposition.
The arguments <A>source_prop</A> and <A>target</A> need to be
strings which name a property, and <A>sval</A> and
<A>tval</A> need to be
boolean values, i.e. true or false.
Has to be set to a string, which describes the reason for the conclusion.
If the ToDo-list entry is displayed, the given string will be displayed with a
because before it.
Creates a ToDoListEntry for two equal
attributes, which means that both values of the two attributes
will be propagated in both directions.
Creates a ToDoListEntry for two equivalent
attributes, which means that both values of the two attributes
will be propagated in both directions.
Please note that this one does NOT implement contrapositions.
This is the category of ToDo-lists.
Every ToDo-list is an object of this category,
which basically contains the ToDo-lists.
Creates a new empty ToDo-list.
Gets a ToDo-list entry, which is a pair of a list of strings and a weak pointer object,
and processes it. If the action was done, it returns true, if not, it returns false, and it returns
fail if the action is not possible anymore due to deleted objects.
Returns the ToDo-list of an object, or creates a new one.
This is the magic! This attribute is never set. Creating an ToDo-list entry installs
an ImmediateMethod for this attribute for the specific category of the object to which
ToDo-list is added, and the filter the entry contains.
It is then triggert if the filters become applicable, so the ToDo-list is processed
If the object <A>obj</A> has the attribute <A>name</A>,
and its value is <A>val</A>, and the knowledge has
been obtained trough ToDoList-entries,
this method traces the way the property was set,
and returns a tree which describes the full way of how the attribute became known.
This operation activates ToDoLists for the argument.
This operation activates ToDoLists for all objects.
This operation deactivates ToDoLists for the argument.
This operation deactivates ToDoLists for all objects.
Note that it is not possible to activate ToDoList for a single object
while they are not activated.
ToDoListEntries will yet be stored for all objects that can have ToDoLists.
All objects created while ToDoLists are deactivated have by default no ToDoList.
Stores the result of Where( 100 ) in an entry
if the entry is triggered. This is not activated
by default, since it might slow down the system.
Deactives the storage of the result of Where( 100 )
if an entry is triggered. This is the default.
A central place for configurations.
ChapterInfo Basics, Variables
This is the super super GAP-category which will
include the GAP-categories IsStructureObjectOrObject and IsHomalgObjectOrMorphism
This is the super GAP-category which will include the GAP-categories
IsHomalgRing, IsHomalgModule, IsHomalgRingOrModule and IsHomalgComplex
This is the super GAP-category which will include the GAP-categories IsHomalgRing
we need this GAP-category to define things like Hom(M,R) as easy as Hom(M,N)
without distinguishing between structure objects (e.g. rings) and objects (e.g. modules)
This is the super GAP-category which will include the GAP-categories
IsHomalgRingMap, etc.
this is the super GAP-category which will include the GAP-categories
IsHomalgRing, IsHomalgModule:
The category for weak pointer objects
The category for pointer objects
The constructor for lists of weak pointers.
A tool to compute the runtime of several methods.
A tool to install equivalence between filters.
Installs a logical implication for one type with all it's contrapositions.
<Br/>
<Br/>
<Br/>
<Br/>
A method to match the properties and attributes of two objects.
Installs methods to pull new known properties and attributes from one object to another
Installs methods to pull new known properties and attributes under certain conditions from one object to another.
Installs an immediate method which can pull a property from one object to another with different names.
Installs an immediate method to pull several properties or attributes from one object to another.
Installs an immediate method to pull a property if it is true.
Installs an immediate method which conditionally pulls a property if it is true.
Installs an immediate method which pulls a property with a different name if it is true.
Installs an immediate method which pulls several properties if they are true
Installs an immediate method to pull a property if it is false.
Installs an immediate method which conditionally pulls a property if it is false.
Installs an immediate method which pulls a property with a different name if it is false.
Installs an immediate method which pulls several properties if they are false.
Installs an immediate method to push a property from one object to another.
Installs an immediate method to conditionally push a property from one object to another.
Installs an immediate method which can push a property from one object to another with different names.
Installs an immediate method to push several properties or attributes from one object to another.
Installs an immediate method to push a property if it is true.
Installs an immediate method which pushes a property with a different name if it is true.
Installs an immediate method which pushes several properties if they are true
Installs an immediate method to push a property if it is false.
Installs an immediate method which pushes a property with a different name if it is false.
Installs an immediate method which push several properties if they are false.
Installs an attribute with a coustom getter function.
Appends an entry to a homalg table.
Creates a list of integers out of the names of components.
Increases an existing counter in an object.
Increases an existiing counter on an object with timing.
Increases a counter in an object and creates one if it not exists
Converts the current memory state to a string
Returns the <A>p</A>-exponent of the integer <A>n</A>, where <A>p</A> is a rational prime.
Apply ViewObj to the list <A>L</A>.
<Br/>
Runs the examples for homalg if the package is loadable.
Runs the named example for homalg
Updates the weak pointers in a container and deletes the empty ones
Adds a weak pointer of an objects to a weak pointer list.
Adds a weak pointer which depends on two objects to a list of weak pointers
Creates a weak pointer depending on two objects and adds it to the container.
Creates a container for pointers.
Updates the container of pointers, removes old.
Adds a pointer to an object to a container for pointers.
Adds a pointer to two objects to a container for pointers
Returns an object which a pointer refers to.
Returns real time seconds of the call function( args ) as first entry of list, result of call as second.
The category of trees. A tree may have a content, a list of successors,
a predecessor and it knows if it is a leave of a tree or not.
The content of the tree.
May be any object.
Returns the list of successors of a tree.
Returns the predecessor of a tree, or fail if there is none.
Returns a list of leaves of the tree.
Returns the first successor of the tree, and adds all other successors of the
tree to the tree that is returned.
If the tree is a leave, it returns an empty tree.
If the tree is empty, it returns the tree itself.
Returns an empty tree.
Returns a tree with argument <A>obj</A>.
Adds the [list of] tree[s] <A>new_tree</A> as successor to the tree <A>tree</A>.
Returns a list of the contents of the trees from the leave <A>sent</A>
up to the content of the head of the tree.
Returns the contents of the nodes of the tree in post-order.
 </Description>
</ManSection>


</Section>



</Chapter>

