<html><head><title>[kbmag] 1 KBMAG</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href = "chapters.htm">Up</a>] [<a href = "theindex.htm">Index</a>]
<h1>1 KBMAG</h1><p>
<P>
<H3>Sections</H3>
<oL>
<li> <A HREF="CHAP001.htm#SECT001">Creating a rewriting system</a>
<li> <A HREF="CHAP001.htm#SECT002">Elementary functions on rewriting systems</a>
<li> <A HREF="CHAP001.htm#SECT003">Setting the ordering</a>
<li> <A HREF="CHAP001.htm#SECT004">Control parameters</a>
<li> <A HREF="CHAP001.htm#SECT005">The Knuth-Bendix program</a>
<li> <A HREF="CHAP001.htm#SECT006">The automatic groups program</a>
<li> <A HREF="CHAP001.htm#SECT007">Word reduction</a>
<li> <A HREF="CHAP001.htm#SECT008">Counting and enumerating irreducible words</a>
<li> <A HREF="CHAP001.htm#SECT009">Rewriting System Examples</a>
<li> <A HREF="CHAP001.htm#SECT010">Subgroups, cosets and subgroup presentations</a>
<li> <A HREF="CHAP001.htm#SECT011">The Knuth-Bendix program on cosets</a>
<li> <A HREF="CHAP001.htm#SECT012">The automatic cosets program</a>
<li> <A HREF="CHAP001.htm#SECT013">Word reduction on cosets</a>
<li> <A HREF="CHAP001.htm#SECT014">Counting and enumerating irreducible words for cosets</a>
<li> <A HREF="CHAP001.htm#SECT015">Examples of the Use of Rewriting System On Cosets</a>
<li> <A HREF="CHAP001.htm#SECT016">Functions for manipulating finite state automata</a>
</ol><p>
<p>
<a name = "I0"></a>

KBMAG  (pronounced ``Kay-bee-mag'') stands  for <strong>Knuth--Bendix on
Monoids, and Automatic Groups</strong>.  It  is a stand-alone package  written
in <code>C</code>, for use under UNIX, with an interface to <font face="Gill Sans,Helvetica,Arial">GAP</font>.  This chapter
describes  its use as  an external  library from within <font face="Gill Sans,Helvetica,Arial">GAP</font>.
There are interfaces for the use of KBMAG with finitely
presented groups, monoids and semigroups defined within <font face="Gill Sans,Helvetica,Arial">GAP</font>.
The package also contains a collection of routines for manipulating
finite state automata, which can be accessed via the <font face="Gill Sans,Helvetica,Arial">GAP</font>
interface.
<p>
To use  this  package effectively,  some  knowledge  of the underlying
theory  and algorithms  is  advisable.  The  Knuth-Bendix algorithm is
described in various places in the literature. Good general references
that deal with the applications to groups and monoids are <a href="biblio.htm#LeC86"><cite>LeC86</cite></a>
and  the  first few  chapters of   <a href="biblio.htm#Sims94"><cite>Sims94</cite></a>.   For the  theory of
automatic   groups  see  the   multi-author book  <a href="biblio.htm#ECHLPT92"><cite>ECHLPT92</cite></a>. The
algorithms employed by KBMAG   are described more  specifically  in
<a href="biblio.htm#EHR91"><cite>EHR91</cite></a> and <a href="biblio.htm#Holt94"><cite>Holt94</cite></a>.
<p>
The manual for the stand-alone KBMAG package (which can be found in
the <code>standalone/doc</code> directory of the package) provides more detailed
information on    the external <code>C</code>   programs that  are called   from <font face="Gill Sans,Helvetica,Arial">GAP</font>.
<p>
Suppose that <var>G</var> is a finitely presented semigroup, monoid or group
defined as a quotient of the free structure <var>F</var>.
The overall  objective of KBMAG is  to construct a  normal form for
the elements of  <var>G</var> in terms of the generators of <var>F</var>,
together with  a word reduction algorithm for  calculating
the normal form representative  of an element in  <var>G</var>, given by a word
in the generators of <var>F</var>.
If this can be achieved,  then it is also possible
to enumerate the words  in normal form up to   a given length,  and to
determine the order  of <var>G</var>, by counting  the number of words in
normal  form. In most  serious  applications,  this will be  infinite,
since (for example) finite groups are (with some  exceptions) usually
handled better by Todd-Coxeter related methods.
In fact a  finite state automaton <var>W</var>
is  calculated  that accepts precisely the   language of words  in the
monoid  generators of <var>F</var> that are   in normal form,  and <var>W</var>  is used for the
enumeration  and counting  functions.
<p>
The  normal form of an element  <var>g inG</var> is defined  to be the least
word in the generators of <var>F</var> (and their inverses) that represents <var>g</var>,
with respect to  a specified ordering on the  set of all  words in the
generators of <var>F</var>.  The available  orderings are described  in <a href="CHAP001.htm#SECT003">Setting the ordering</a> below.
<p>
KBMAG offers two possible means of achieving these objectives.  The
first   is   to apply   the   Knuth-Bendix   algorithm  to  the
presentation, with one of the  available orderings on words, and  hope
that the algorithm will complete with a finite confluent presentation.
(If <var>G</var> is finite, then it is  guaranteed to complete eventually
but,  like the  Todd-Coxeter procedure, it  may  take a long  time, or
require more space  than  is  available.)  The second  is  to  use the
automatic group program, which is only applicable to groups (not to
monoids or semigroups). This  also uses the Knuth-Bendix procedure as
one component of the algorithm, but  it aims to compute certain finite
state  automata rather  than to obtain   a  finite confluent rewriting
system, and it completes successfully on many  examples for which such
a finite system does not exist. In the current standalone implementation,
its use is  restricted to the ``shortlex" ordering  on words.  That is,
words are
ordered first by increasing length, and then words of equal length are
ordered lexicographically,   using the    specified ordering  of   the
generators. However, there are now some <font face="Gill Sans,Helvetica,Arial">GAP</font> procedures available
in the package written by Sarah Rees that enable it be used also for the
``wtlex" ordering, and the ``wreathprod" ordering. See below for further
details of these orderings.
<p>
For both of the above procedures, the first step is to create a <font face="Gill Sans,Helvetica,Arial">GAP</font>
object   known as  a  <em>Knuth-Bendix rewriting  system</em><var>R</var> from the
finitely
presented structure <var>G</var>.  There are functions available that can be used to
specify  the input parameters  for the external  programs, such as the
ordering on words to be used by the Knuth-Bendix procedure. One of the
two  external programs is then run  on  <var>R</var>. If successful, it updates
<var>R</var>, which  can then be  used to reduce words in
the generators of <var>F</var> to normal form, and  to count and  enumerate the
words in normal form.
<p>
There are also now some routines available for performing
corresponding operations with the cosets of a specified subgroup
<var>H</var> of the group <var>G</var>. (These are not currently available for semigroups or
monoids.) The words in normal form then correspond to minimal
representatives under the ordering of the system of the right
cosets of <var>H</var> in <var>G</var>. If successful, the index of <var>H</var> in <var>G</var> can
be determined. The Knuth-Bendix routines also allow a confluent
rewriting system for <var>H</var> to be computed, whereas the automatic groups
routines allow a presentation of <var>H</var> to be computed (although not yet on
a user-specified generating set).
<p>
In the descriptions of the  functions that follow,  it is important to
distinguish between  irreducible words, and  words in normal form.  As
already stated, a word is in normal form if it is the least word under
the ordering of the  rewriting system that  defines a particular group
element or coset.  So  there is always  a unique word in  normal form
for each group element or coset,  and it is  determined by the  group
generators and the
ordering on words  in  the group   generators. A word  in a  rewriting
system is said to be irreducible if it  does not contain the left hand
side of any of the reduction  rules in the  system as a subword. Words
in normal form are always irreducible, but the converse is true if and
only   if  the rewriting system  is   confluent.  The automatic groups
programs provide a  method of  reducing  words to normal  form without
obtaining a  finite  confluent rewriting  system  (which may  not even
exist).
<p>
Various levels of diagnostic  output  from the <font face="Gill Sans,Helvetica,Arial">GAP</font>  procedures   can
be turned on  by
setting the Info variable  <code>InfoRWS</code>  to 1, 2 or 3.
<p>
<p>
<h2><a name="SECT001">1.1 Creating a rewriting system</a></h2>
<p><p>
<a name = "I1"></a>

First the user should be aware of a technicality. The words in a
rewriting system created in <font face="Gill Sans,Helvetica,Arial">GAP</font> for use by KBMAG are defined over an
alphabet that consists of the generators of a free monoid, called the
<code>word-monoid</code> of the system. Suppose, as before,  that the rewriting system
is defined from the semigroup, monoid or group <var>G</var> which is a quotient of
the free structure <var>F</var>. Then the generators of this alphabet will be  in
one-one correspondence with the generators (or, when <var>G</var> is a group, the
generators and their inverses) of <var>F</var>, but will not be identical to them.
This feature was necessary for technical reasons. Most of the user-level
functions take and return words in <var>F</var> rather than the alphabet, but
they do this by converting from one to the other and back.
<p>
User-level functions have also been provided to carry out this
conversion explicitly if required. 
<p>
The user should also be aware of a peculiarity in the way that
rewriting sytems are displayed, which is really a hangover from
the <font face="Gill Sans,Helvetica,Arial">GAP</font>3 interface. They are displayed nicely as a record, which gives
a useful description of the system, but it does not correspond at
all to the way that they are actually stored internally!
<p>
<a name = "SSEC001.1"></a>
<li><code>KBMAGRewritingSystem( </code><var>G</var><code> ) O</code>
<p>
constructs and returns a rewriting system <var>R</var> from  a
finitely presented semigroup, monoid or group <var>G</var>.
When <var>G</var> is a group, the alphabet members of <var>R</var> correspond to the generators
of  <var>F</var>  together with inverses  for  those  generators  which are not
obviously involutory in <var>G</var>.
<p>
<p>
<h2><a name="SECT002">1.2 Elementary functions on rewriting systems</a></h2>
<p><p>
<a name = "I2"></a>

<a name = "SSEC002.1"></a>
<li><code>IsKBMAGRewritingSystemRep( </code><var>rws</var><code> ) R</code>
<p>
Returns true if <var>rws</var> is a rewriting system created by 
<code>KBMAGRewritingSystem</code>. The functions <code>IsRewritingSystem</code> and
<code>IsKnuthBendixRewritingSystem</code> will also return true on
such a system.
<p>
<a name = "SSEC002.2"></a>
<li><code>IsConfluent( </code><var>rws</var><code> ) A</code>
<p>
Returns true if <var>rws</var> is a rewriting system that is known
to be confluent.
<p>
<a name = "SSEC002.3"></a>
<li><code>SemigroupOfRewritingSytem( </code><var>rws</var><code> ) O</code>
<p>
<a name = "SSEC002.4"></a>
<li><code>FreeStructureOfSystem( </code><var>rws</var><code> ) O</code>
<p>
<a name = "SSEC002.5"></a>
<li><code>WordMonoidOfRewritingSystem( </code><var>rws</var><code> ) O</code>
<p>
These return, respectively, the semigroup, monoid or group <var>G</var>,
the free structure <var>F</var>, and the word-monoid of the rewriting system,
as defined in the preceding section.
<p>
<a name = "SSEC002.6"></a>
<li><code>ExternalWordToInternalWordOfRewritingSystem( </code><var>rws</var><code>, </code><var>w</var><code> ) F</code>
<p>
<a name = "SSEC002.7"></a>
<li><code>InternalWordToExternalWordOfRewritingSystem( </code><var>rws</var><code>, </code><var>w</var><code> ) F</code>
<p>
These are the functions for converting between external words,
which are those defined over the free structure <var>F</var> of <var>rws</var>,
and the internal words, which are defined over the word-monoid
of <var>rws</var>.
<p>
<a name = "SSEC002.8"></a>
<li><code>Alphabet( </code><var>rws</var><code> )</code>
<p>
This is an ordered list of the generators of the word-monoid of <var>rws</var>.
It will not necessarily be in the normal order of these generators,
and it can be re-ordered by the function
<code>ReorderAlphabetOfKBMAGRewritingSystem</code> (see below).
<p>
<a name = "SSEC002.9"></a>
<li><code>Rules( </code><var>rws</var><code> ) O</code>
<p>
A list of the reduction rules of <var>rws</var>. Each rule is a two-element list
containing the left and right hand sides of the rule, which are words
in the alphabet of <var>rws</var>.
<p>
<a name = "SSEC002.10"></a>
<li><code>ResetRewritingSystem( </code><var>rws</var><code> ) F</code>
<p>
This function resets the rewriting system <var>rws</var> back to its form as it
was before the application of <code>KnuthBendix</code> or <code>AutomaticStructure</code>.
However, the current ordering  and values  of control  parameters  will not
be changed. The normal form and  reduction algorithms will  be unavailable
after  this call.
<p>
<p>
<h2><a name="SECT003">1.3 Setting the ordering</a></h2>
<p><p>
<a name = "I3"></a>

<a name = "SSEC003.1"></a>
<li><code>SetOrderingOfKBMAGRewritingSystem( </code><var>rws</var><code>, </code><var>ordering</var><code> [,</code><var>list</var><code>] ) F</code>
<p>
<a name = "SSEC003.2"></a>
<li><code>ReorderAlphabetOfKBMAGRewritingSystem( </code><var>rws</var><code>, </code><var>p</var><code> ) F</code>
<p>
<a name = "SSEC003.3"></a>
<li><code>OrderingOfKBMAGRewritingSystem( </code><var>rws</var><code> ) F</code>
<p>
<a name = "SSEC003.4"></a>
<li><code>OrderingOfRewritingSystem( </code><var>rws</var><code> ) F</code>
<p>
<code>SetOrderingOfKBMAGRewritingSystem</code> changes  the ordering on  the  words
of the rewriting system  <var>rws</var>  to   <var>ordering</var>.
<var>rws</var> is reset when the ordering is changed, so any previously
calculated results will be destroyed.
<var>ordering</var> must  be  one of the  strings ``shortlex",
``recursive", ``wtlex"  and  ``wreathprod".  The
default is ``shortlex", and this is the ordering of rewriting systems
returned  by    <code>KBMAGRewritingSystem</code>.   The   orderings    ``wtlex"
 and ``wreathprod" require the third parameter, <var>list</var>,  which must be a
list  of  positive integers  in   one-one correspondence  with the
alphabet of <var>rws</var> in its current order.
They have  the effect of attaching weights or
levels to the alphabet members, in the cases ``wtlex" and ``wreathprod",
respectively.
<p>
Each  of these orderings depends on  the order of  the alphabet, The
current ordering of generators is displayed under the <code>generatorOrder</code>
field  when <var>rws</var> is  viewed.  This ordering can   be changed  by the
function  'ReorderAlphabetOfKBMAGRewritingSystem'.
The  second  parameter <var>p</var> to  this
function should be a permutation that moves at most <var>ng</var> points, where
<var>ng</var> is  the number of generators.  This permutation is applied to the
current list of generators.
<p>
<code>OrderingOfKBMAGRewritingSystem</code> merely prints out a description of
the current ordering.
<p>
In the ``shortlex" ordering, shorter words come before longer ones,
and,  for words  of  equal length, the  lexicographically smaller word
comes   first, using the   ordering   of the alphabet.
The   ``wtlex"  ordering is similar,   but
instead of  using the length  of the word  as the first criterion, the
total weight of the word  is used; this  is defined as  the sum of the
weights of   the generators  in  the word.   So ``shortlex" is  the
special   case of ``wtlex" in which   all  generators have the same
nonzero weight.
<p>
The ``recursive" ordering is  the special case  of ``wreathprod"
in which the levels of the <var>ng</var> generators are <var>1,  2, ..., ng</var>, in
the order of the alphabet.  We shall not attempt
to give  a complete definition of  these orderings here, but refer the
reader instead to pages  46--50 of <a href="biblio.htm#Sims94"><cite>Sims94</cite></a>.  The ``recursive"
ordering is the one appropriate  for a power-conjugate presentation of
a  polycyclic  group, but  where   the generators are  ordered  in the
reverse  order from the usual  convention  for polycyclic groups.  The
confluent  presentation will then  be the  same as the power-conjugate
presentation.  For example,  for the  Heisenberg  group <var>langlex,y,z
, | ,  [x,z]=[y,z]=1,  [y,x]=z rangle</var>,   a
good   ordering  is ``recursive"  with    the  order of  generators
<var>[z<sup>-1</sup>,z,y<sup>-1</sup>,y,x<sup>-1</sup>,x]</var>.   This    example is     included   in
<a href="CHAP001.htm#SECT009">Rewriting System Examples</a> below.
<p>
Finally, <code>OrderingOfRewritingSystem</code> returns the appropriate  <font face="Gill Sans,Helvetica,Arial">GAP</font> ordering
on the elements of the word-monoid of <var>rws</var>. The standard <font face="Gill Sans,Helvetica,Arial">GAP</font> ordering
functions, such as <code>IsLessThanUnder(</code><var>ord</var><code>,</code><var>el1</var><code>,</code><var>el2</var><code>)</code> can then be used.
<p>
<p>
<h2><a name="SECT004">1.4 Control parameters</a></h2>
<p><p>
<a name = "I4"></a>

<a name = "SSEC004.1"></a>
<li><code>InfoRWS V</code>
<p>
This <code>Info</code> variable can be set to 0, 1, 2 or 3 to control the level
of diagnostic output.
<p>
The Knuth-Bendix procedure is unusually sensitive to the settings of a
number of parameters  that control its  operation. In some examples, a
small change  in   one of  these  parameters can  mean the  difference
between  obtaining a confluent  rewriting system fairly quickly on the
one hand, and  the  procedure running  on until it  uses all available
memory on the other hand.
<p>
Unfortunately, it is   almost  impossible to  give even  very  general
guidelines   on these   settings,  although the    ``wreathprod"
orderings appear to  be  more sensitive  than the ``shortlex"   and
``wtlex" orderings.  The user  can  only acquire a  feeling for the
influence of these parameters by  experimentation on a large number of
examples.
<p>
The control  parameters are defined  by the user  by setting values of
certain fields of the <var>options record</var> of a rewriting system.
<p>
<a name = "SSEC004.2"></a>
<li><code>OptionsRecordOfKBMAGRewritingSystem( </code><var>rws</var><code> ) F</code>
<p>
Returns the options record <var>OR</var> of the rewriting system <var>rws</var>. The
fields of <var>OR</var> listed below can be set by the user. Be careful to spell
them correctly, because otherwise they will have no effect!
<p>
<dl compact>
<dt><code></code><var>OR</var><code>.maxeqns</code>: <dd> 
        A positive integer specifying  the maximum number of rewriting
	rules allowed in <var>rws</var>.  The  default is 32767. If this number
	is exceeded, then <code>KnuthBendix</code> or <code>AutomaticStructure</code> will abort.
<p>
<dt><code></code><var>OR</var><code>.tidyint</code>: <dd>
	A positive integer,  100 by default.  During the  Knuth-Bendix
	procedure, the search for overlaps is interrupted periodically
	to tidy up the existing system  by removing and/or simplifying
	rewriting rules  that have become  redundant. This  tidying is
	done  after    finding <code></code><var>OR</var><code>.tidyint</code> rules    since the last
	tidying.
<p>
<dt><code></code><var>OR</var><code>.confnum</code>: <dd>
	A  positive integer, 500    by  default.  If   <code></code><var>OR</var><code>.confnum</code>
	overlaps are processed  in  the Knuth-Bendix procedure  but no
	new rules  are  found, then  a  fast test  for confluence   is
	carried out. This saves a lot of time  if the system really is
	confluent, but usually wastes time if it is not.
<p>
<dt><code></code><var>OR</var><code>.maxstoredlen</code>: <dd>
        This    is a list   of  two   positive integers, <var>maxlhs</var>  and
	<var>maxrhs</var>; the  default is that both  are infinite.  Only those
	rewriting rules for  which the  left hand  side has  length at
	most   <var>maxlhs</var>  and the right hand    side has length at most
	<var>maxrhs</var> are stored;  longer   rules are  discarded. In   some
	examples it  is essential to   impose such limits in order  to
	obtain  a  confluent  rewriting   system. Of  course, if   the
	Knuth-Bendix procedure  halts with  such limits imposed,  then
	the    resulting system need   not be  confluent. However, the
	confluence can  then be  tested be  re-running <code>KnuthBendix</code>  with  the
	limits removed.  (To remove the  limits, unbind the field.)
<p>
<dt><code></code><var>OR</var><code>.maxoverlaplen</code>: <dd>
	This  is apositive integer, which  is  infinite by default (when not
	set).      Only      those    overlaps     of   total   length
	<code></code><var>OR</var><code>.maxoverlaplen</code>  are processed. Similar remarks apply to
	those for <code></code><var>OR</var><code>.maxstoredlen</code>.
<p>
<dt><code></code><var>OR</var><code>.sorteqns</code>: <dd>
	This should be true or false, and false  is the default.  When
	it is  true,   the rewriting  rules  are output  in order   of
	increasing length  of left  hand  side.  (The  default is that
	they are output in the order that they were found).
<p>
<dt><code></code><var>OR</var><code>.maxoplen</code>: <dd>
	This is an  integer, which is  infinite  by default (when  not
	set).  When it is set, the rewriting rules are output in order
	of increasing length of left hand side (as if <code></code><var>OR</var><code>.sorteqns</code>
	were true), and only  those  rules having  left hand sides  of
	length up to     <code></code><var>OR</var><code>.maxoplen</code> are output   at all.  Again,
	similar remarks apply to those for <code></code><var>OR</var><code>.maxstoredlen</code>.
<p>
<dt><code></code><var>OR</var><code>.maxreducelen</code>: <dd>
	A positive integer,  32767  by default.  This is  the  maximum
	length that a word is   allowed to have during the   reduction
	process.  It is  only likely to  be   exceeded when using  the
	``wreathprod" or ``recursive" ordering.
<p>
<dt><code></code><var>OR</var><code>.maxstates</code>, <code></code><var>OR</var><code>.maxwdiffs</code>: <dd>
	These are positive integers, controlling the maximum number of
	states of the word-reduction  automaton used by <code>KnuthBendix</code>,  and the
	maximum  number   of  word-differences allowed   when  running
	<code>AutomaticStructure</code>, respectively. These numbers are normally increased
	automatically   when required, so it   unusual to  want to set
	these  flags. They can   be set when  either  it is desired to
	limit these parameters   (and  prevent them   being  increased
	automatically), or (as   occasionally happens), the number  of
	word-differences increases too rapidly for the program to cope
	-   when this happens, the  run  is usually  doomed to failure
	anyway.
</dl>
<p>
<p>
<h2><a name="SECT005">1.5 The Knuth-Bendix program</a></h2>
<p><p>
<a name = "I5"></a>

<a name = "SSEC005.1"></a>
<li><code>KnuthBendix( </code><var>rws</var><code> ) O</code>
<a name = "SSEC005.1"></a>
<li><code>MakeConfluent( </code><var>rws</var><code> ) O</code>
<p>
These two functions do the same thing, namely to
run the external Knuth-Bendix program  on the rewriting system  <var>rws</var>.
<code>KnuthBendix</code>  returns  true  if it  finds   a  confluent rewriting system  and
otherwise false. In either case,  if it halts  normally, then it  will
update the list
of the rewriting rules of <var>rws</var>, and also store a  finite state automaton
<code>ReductionAutomaton(</code><var>rws</var><code>)</code> that  can be  used for  word reduction,  and  the
counting and enumeration of irreducible words.
<p>
All control parameters (as defined in the preceding section) should be
set  before calling <code>KnuthBendix</code>.  <code>KnuthBendix</code>  will halt either when it
finds a finite confluent system of rewriting rules, or when one of the
control parameters (such as <code></code><var>OR</var><code>.maxeqns</code>) requires it to stop.  The
program can also  be made to halt and  output manually at any time  by
hitting the interrupt key (normally <var>ctr</var>-'C') once. (Hitting it twice
has   unpredictable   consequences, since  <font face="Gill Sans,Helvetica,Arial">GAP</font>    may intercept the
signal.)
<p>
If <code>KnuthBendix</code> halts without finding a confluent system, but still manages to
output the current system and update <var>rws</var>, then it is possible to use
the  resulting   rewriting system  to  reduce  words,  and  count  and
enumerate   the irreducible words; it  cannot   be guaranteed that the
irreducible words are all in normal form, however. It is also possible
to re-run <code>KnuthBendix</code>  on the current system,  usually after altering some of
the control parameters. In fact, is some more difficult examples, this
seems to be the only means of finding a finite confluent system.
<p>
<a name = "SSEC005.2"></a>
<li><code>ReductionAutomaton( </code><var>rws</var><code> ) F</code>
<p>
the reduction automaton of <var>rws</var>. Only expert users will wish to see this
explicitly.  See the section on finite state automata below for general
information on functions for manipulating automata.
<p>
<p>
<h2><a name="SECT006">1.6 The automatic groups program</a></h2>
<p><p>
<a name = "I6"></a>

<a name = "SSEC006.1"></a>
<li><code>AutomaticStructure( </code><var>rws</var><code>, [</code><var>large</var><code>], [</code><var>filestore</var><code>], [</code><var>diff1</var><code>]) O</code>
<p>
Run  the  external automatic groups  program  on  the rewriting system
<var>rws</var>.  <code>AutomaticStructure</code> returns true if successful and false otherwise. If
successful, it stores three finite state automata
<code>FirstWordDifferenceAutomaton(</code><var>rws</var><code>)</code>, <code>SecondWordDifferenceAutomaton(</code><var>rws</var><code>)</code>
and <code>WordAcceptor(</code><var>rws</var><code>)</code>. The  first two  of  these  are used    for
word-reduction, and   the   third for counting     and enumeration of
irreducible words (i.e. words in normal  form).
<p>
The three optional parameters to <code>AutomaticStructure</code> are all boolean, and
false by  default.  Setting  <var>large</var>  true results in   some of  the control
parameters (such as  <code>maxeqns</code>  and <code>tidyint</code>) being   set
larger than they would be   otherwise. This is necessary for  examples
that require a large amount of space. Setting <var>filestore</var> true results
in more  use being made  of temporary files  than would  be otherwise.
This makes the program run slower, but it may be  necessary if you are
short of  core memory. Setting <var>diff1</var> to  be true is a more technical
option, which is  explained more fully   in the documentation for  the
stand-alone KBMAG package. It is not  usually necessary or helpful,
but it enables  one or two  examples to complete  that would otherwise
run out of space.
<p>
The ordering field of <var>rws</var> will usually be equal to ``shortlex"
for <code>AutomaticStructure</code> to be applicable.
However, it is now possible to use some procedures written by Sarah Rees
that work when the ordering is ``wtlex" or ``wreathprod". In the latter
case, each generator must have the same level as its inverse.
<p>
The only control parameters for <var>rws</var> that
are likely to be relevant are <code>maxeqns</code> and <code>maxwdiffs</code>.
<p>
<a name = "SSEC006.2"></a>
<li><code>WordAcceptor( </code><var>rws</var><code> ) F</code>
<p>
<a name = "SSEC006.3"></a>
<li><code>FirstWordDifferenceAutomaton( </code><var>rws</var><code> ) F</code>
<p>
<a name = "SSEC006.4"></a>
<li><code>SecondWordDifferenceAutomaton( </code><var>rws</var><code> ) F</code>
<p>
<a name = "SSEC006.5"></a>
<li><code>GeneralMultiplier( </code><var>rws</var><code> ) F</code>
<p>
These functions return, respectively, the word acceptor, the first and
second word-difference automata, and the general multiplier automaton
of <var>rws</var>. They can only be called after a successful call of
<code>AutomaticStructure(</code><var>rws</var><code>)</code>. All except the word-acceptor are 2-variable
automata that read pairs of words in the alphabet of <var>rws</var>.
Note that the general multiplier has
its states labeled, where the different labels represents the accepting
states for the different letters in the alphabet of <var>rws</var>.
<p>
<p>
<h2><a name="SECT007">1.7 Word reduction</a></h2>
<p><p>
<a name = "SSEC007.1"></a>
<li><code>IsReducedWord( </code><var>rws</var><code>, </code><var>w</var><code> ) A</code>
<a name = "SSEC007.1"></a>
<li><code>IsReducedForm( </code><var>rws</var><code>, </code><var>w</var><code> ) A</code>
<p>
These two functions do the same thing, namely to
test  whether the word <var>w</var> in  the generators of  the freestructure
<code>FreeStructure(</code><var>rws</var><code>)</code> of the rewriting system system
<var>rws</var> is reduced or not, and return true or false.
<p>
<code>IsReducedWord</code> can only be used after <code>KnuthBendix</code>
or <code>AutomaticStructure</code> has been run successfully on <var>rws</var>. In the former
case, if <code>KnuthBendix</code> halted without
a  confluent set of rules, then  irreducible words are not necessarily
in  normal form (but  reducible  words are  definitely  not in  normal
form).    If  <code>KnuthBendix</code> completes with    a  confluent rewriting system  or
<code>AutomaticStructure</code> completes  successfully, then  it   is guaranteed that 
all irreducible words are in normal form.
<p>
<p>
<a name = "SSEC007.2"></a>
<li><code>ReducedForm( </code><var>rws</var><code>, </code><var>w</var><code> ) O</code>
<a name = "SSEC007.2"></a>
<li><code>ReducedWord( </code><var>rws</var><code>, </code><var>w</var><code> ) O</code>
<p>
Reduce the word  <var>w</var> in the generators of the freestructure
<code>FreeStructure(</code><var>rws</var><code>)</code> of the rewriting system  <var>rws</var>
(or, equivalently, in the    generators  of the underlying   group  of
<var>rws</var>), and return the result.
<p>
<code>ReducedForm</code> can only be used after <code>KnuthBendix</code> or <code>AutomaticStructure</code>
has been run
successfully on <var>rws</var>.  In the former case, if  <code>KnuthBendix</code> halted without  a
confluent  set of  rules, then the   irreducible word returned is  not
necessarily in  normal   form.  If <code>KnuthBendix</code>  completes   with  a confluent
rewriting  system or  <code>AutomaticStructure</code>  completes  successfully, then it  is
guaranteed that all irreducible words are in normal form.
<p>
<p>
<h2><a name="SECT008">1.8 Counting and enumerating irreducible words</a></h2>
<p><p>
<a name = "SSEC008.1"></a>
<li><code>Size( </code><var>rws</var><code> ) M</code>
<p>
Returns the number of irreducible words in the rewriting system <var>rws</var>.
<p>
<code>Size</code>   can only be  used  after <code>KnuthBendix</code>  or
<code>AutomaticStructure</code> has been run
successfully  on <var>rws</var>. In  the former case, if  <code>KnuthBendix</code> halted without a
confluent  set of rules, then the  number of  irreducible words may be
greater than the number of words in normal form (which is equal to the
order  of the underlying group, monoid or semigroup <var>G</var>  of  <var>rws</var>).  If
<code>KnuthBendix</code>  completes with a confluent rewriting system  or
<code>AutomaticStructure</code> completes successfully, then it is  guaranteed that
<code>Size</code> will  return the correct order of <var>G</var>.
<p>
<p>
<a name = "SSEC008.2"></a>
<li><code>Order( </code><var>rws</var><code>, </code><var>w</var><code> ) M</code>
<p>
The order  of the element <var>w</var> of the free structure <code>FreeStructure(</code><var>rws</var><code>)</code> of
<var>rws</var> as an element of the group or monoid from which <var>rws</var> was defined.
<p>
<code>Order</code>   can only be  used  after <code>KnuthBendix</code>  or
<code>AutomaticStructure</code> has been run successfully  on <var>rws</var>.
It is not guaranteed to terminate in the case of infinite order, but it
usually seems to do so in practice!
<p>
<p>
<a name = "SSEC008.3"></a>
<li><code>EnumerateReducedWords(</code><var>rws</var><code>, </code><var>min</var><code>, </code><var>max</var><code>) O</code>
<p>
Enumerate  all  irreducible words in  the  rewriting system <var>rws</var> that
have   lengths between <var>min</var> and <var>max</var>    (inclusive), which should be
non-negative integers.    The result is returned  as  a list of words.
The enumeration is by depth-first search  of a finite state automaton,
and so  the words in the  list returned  are ordered lexicographically
(not by shortlex).
<p>
<code>EnumerateReducedWords</code> can only be used after <code>KnuthBendix</code>
or <code>AutomaticStructure</code> has been run
successfully on <var>rws</var>. In  the former case,  if <code>KnuthBendix</code> halted  without a
confluent set of  rules, then not all irreducible   words in the  list
returned will necessarily be in normal form.  If <code>KnuthBendix</code> completes with a
confluent rewriting  system or <code>AutomaticStructure</code> completes successfully, then
it is guaranteed that all words in the list will be in normal form.
<p>
<p>
<a name = "SSEC008.4"></a>
<li><code>GrowthFunction( </code><var>rws</var><code> ) F</code>
<p>
Returns the growth function of the set of irreducible words in the
rewriting system <var>rws</var>. This is a rational function, of which
the coefficient of <var>x<sup>n</sup></var> in its Taylor expansion is equal to the number of
irreducible words of length <var>n</var>.
<p>
If the coefficients in this rational function are larger than about 16000
then strange error messages will appear and fail will be returned.
<p>
<code>GrowthFunction</code> can only be used after <code>KnuthBendix</code>
or <code>AutomaticStructure</code> has been run
successfully on <var>rws</var>. In  the former case,  if <code>KnuthBendix</code> halted  without a
confluent set of  rules, then not all irreducible   words in the  list
returned will necessarily be in normal form.  If <code>KnuthBendix</code> completes with a
confluent rewriting  system or <code>AutomaticStructure</code> completes successfully,
then it is guaranteed that all words in the list will be in normal form.
<p>
<p>
<h2><a name="SECT009">1.9 Rewriting System Examples</a></h2>
<p><p>
<a name = "I7"></a>

<code>Example 1</code>
<p>
We start with a easy example - the alternating group <var>A<sub>4</sub></var>.
<pre>
    gap&gt; F:=FreeGroup("a","b");;
    gap&gt; a:=F.1;; b:=F.2;;
    gap&gt; G:=F/[a^2, b^3, (a*b)^3];;
    gap&gt; R:=KBMAGRewritingSystem(G);
    rec(
               isRWS := true,
      generatorOrder := [_g1,_g2,_g3],
            inverses := [_g1,_g3,_g2],
            ordering := "shortlex",
           equations := [
             [_g2^2,_g3],
             [_g1*_g2*_g1,_g3*_g1*_g3]
           ]
    )
    #Notice that monoid generators printed as _g1, _g2, _g3 are used
    #internally. These correspond to the group generators a, b, b^-1.
    gap&gt; KnuthBendix(R);
    true
    gap&gt; R;
    rec(
               isRWS := true,
         isConfluent := true,
      generatorOrder := [_g1,_g2,_g3],
            inverses := [_g1,_g3,_g2],
            ordering := "shortlex",
           equations := [
             [_g1^2,IdWord],
             [_g2*_g3,IdWord],
             [_g3*_g2,IdWord],
             [_g2^2,_g3],
             [_g3*_g1*_g3,_g1*_g2*_g1],
             [_g3^2,_g2],
             [_g2*_g1*_g2,_g1*_g3*_g1],
             [_g3*_g1*_g2*_g1,_g2*_g1*_g3],
             [_g1*_g2*_g1*_g3,_g3*_g1*_g2],
             [_g2*_g1*_g3*_g1,_g3*_g1*_g2],
             [_g1*_g3*_g1*_g2,_g2*_g1*_g3]
           ]
    )
    #The `equations' field of &lt;R&gt; is now a complete system of rewriting rules
    gap&gt; Size(R);
    12
    gap&gt; EnumerateReducedWords(R,0,12);
    [ &lt;identity ...&gt;, a, a*b, a*b*a, a*b^-1, a*b^-1*a, b, b*a, b*a*b^-1, b^-1, 
      b^-1*a, b^-1*a*b ]
    #We have enumerated all of the elements of the group - note that they
    #are returned as words in the free group F.
</pre>
<p>
<code>Example 2</code>
<p>
    The Fibonacci group <var>F(2,5)</var> defined by a semigroup rather than a group
    presentation. Interestingly this defines the same structure (although
    ir would not do so for <var>F(2,r)</var> with <var>r</var> even).
    beginexample
    gap&gt; S:=FreeSemigroup(5);; a:=S.1;; b:=S.2;; c:=S.3;; d:=S.4;; e:=S.5;;
    gap&gt; Q := S/[ [a<strong>b,c], [b</strong>c,d], [c<strong>d,e], [d</strong>e,a], [e<strong>a,b] ];
    <var>fp semigroup on the generators [ s1, s2, s3, s4, s5 ]</var>
    gap&gt; R:=KBMAGRewritingSystem(Q); 
    rec(
               isRWS := true,
              silent := true,
      generatorOrder := [_s1,_s2,_s3,_s4,_s5],
            inverses := [,,,,],
            ordering := <a href="badlink:kbmag:shortlex">shortlex</a>,
           equations := [
             [_s1</strong>_s2,_s3],
             [_s2<strong>_s3,_s4],
             [_s3</strong>_s4,_s5],
             [_s4<strong>_s5,_s1],
             [_s5</strong>_s1,_s2]
           ]
    )
    gap&gt; KnuthBendix(R);
    true
    gap&gt; Size(R);
    11
    gap&gt; EnumerateReducedWords(R,0,4);
    [ s1, s1^2, s1^2<strong>s4, s1</strong>s3, s1<strong>s4, s2, s2^2, s2</strong>s5, s3, s4, s5 ]
    #Let's do the same thing using the <a href="badlink:kbmag:recursive">recursive</a> ordering.
    gap&gt; SetOrderingOfKBMAGRewritingSystem(R,<a href="badlink:kbmag:recursive">recursive</a>);
    gap&gt; KnuthBendix(R);
    true
    gap&gt; Size(R);                                         
    11
    gap&gt; EnumerateReducedWords(R,0,11);
    [ s1, s1^2, s1^3, s1^4, s1^5, s1^6, s1^7, s1^8, s1^9, s1^10, s1^11 ]
endexample
<p>
<code>Example 3</code>
<p>
The Heisenberg group  - that is,  the free 2-generator nilpotent group
of class 2.   For  this to complete,  we   need to use   the recursive
ordering, and reverse our initial order of generators. (Alternatively,
we  could avoid this reversal,  by using a ``wreathprod" ordering, and
setting the levels of the generators to be 6,5,4,3,2,1.)
<pre>
    gap&gt; F:=FreeGroup("x","y","z");;
    gap&gt; x:=F.1;; y:=F.2;; z:=F.3;;
    gap&gt; G:=F/[Comm(y,x)*z^-1, Comm(z,x), Comm(z,y)];;
    gap&gt; R:=KBMAGRewritingSystem(G);
    rec(
               isRWS := true,
      generatorOrder := [_g1,_g2,_g3,_g4,_g5,_g6],
            inverses := [_g2,_g1,_g4,_g3,_g6,_g5],
            ordering := "shortlex",
           equations := [
             [_g4*_g2*_g3,_g5*_g2],
             [_g6*_g2,_g2*_g6],
             [_g6*_g4,_g4*_g6]
           ]
    )
    gap&gt; SetOrderingOfKBMAGRewritingSystem(R,"recursive");
    gap&gt; ReorderAlphabetOfKBMAGRewritingSystem(R,(1,6)(2,5)(3,4));
    gap&gt; R;
    rec(
               isRWS := true,
      generatorOrder := [_g6,_g5,_g4,_g3,_g2,_g1],
            inverses := [_g5,_g6,_g3,_g4,_g1,_g2],
            ordering := "recursive",
           equations := [
             [_g4*_g2*_g3,_g5*_g2],
             [_g6*_g2,_g2*_g6],
             [_g6*_g4,_g4*_g6]
           ]
    )
    gap&gt; SetInfoLevel(InfoRWS,1);
    gap&gt; KnuthBendix(R);
    #I  Calling external Knuth-Bendix program.
    #System is confluent.
    #Halting with 18 equations.
    #I  External Knuth-Bendix program complete.
    #I  System computed is confluent.
    true
    gap&gt; R;
    rec(
               isRWS := true,
         isConfluent := true,
      generatorOrder := [_g6,_g5,_g4,_g3,_g2,_g1],
            inverses := [_g5,_g6,_g3,_g4,_g1,_g2],
            ordering := "recursive",
           equations := [
             [_g6*_g5,IdWord],
             [_g5*_g6,IdWord],
             [_g4*_g3,IdWord],
             [_g3*_g4,IdWord],
             [_g2*_g1,IdWord],
             [_g1*_g2,IdWord],
             [_g6*_g2,_g2*_g6],
             [_g6*_g4,_g4*_g6],
             [_g4*_g2,_g2*_g4*_g5],
             [_g5*_g2,_g2*_g5],
             [_g6*_g1,_g1*_g6],
             [_g5*_g4,_g4*_g5],
             [_g6*_g3,_g3*_g6],
             [_g3*_g1,_g1*_g3*_g5],
             [_g4*_g1,_g1*_g4*_g6],
             [_g3*_g2,_g2*_g3*_g6],
             [_g5*_g1,_g1*_g5],
             [_g5*_g3,_g3*_g5]
           ]
    )
    gap&gt; Size(R);
    infinity
    gap&gt; IsReducedWord(R,z*y*x);
    false
    gap&gt; ReducedForm(R,z*y*x);
    x*y*z^2
    gap&gt; IsReducedForm(R,x*y*z^2);
    true
</pre>
<p>
<code>Example 4</code>
<p>
This is an  example of the use  of the Knuth-Bendix algorithm to prove
the nilpotence of a  finitely presented group.  (The method is due  to
Sims, and is described in Chapter 11.8 of <a href="biblio.htm#Sims94"><cite>Sims94</cite></a>.) This example
is of intermediate difficulty, and demonstrates the necessity of using
the <code>maxstoredlen</code> control parameter.
<p>
The group  is   <p><var>  langlea,b   ,|  ,[b,a,b],
[b,a,a,a,a],  [b,a,a,a,b,a,a] rangle<p></var> with left-normed commutators.
The first step  in the  method is to   check that there is  a  maximal
nilpotent quotient of the group, for which we  could use, for example,
the <font face="Gill Sans,Helvetica,Arial">GAP</font>   <code>NilpotentQuotient</code>   command, from   the  package
``nq".  We find that  there is a  maximal  such quotient, and it  has
class 7, and the  layers going down  the lower central series have the
abelian structures [0,0], [0], [0], [0], [0], [2], [2].
<p>
By  using the  stand-alone  <code>C</code>   nilpotent  quotient program,  it  is
possible to  find  a  power-commutator  presentation of  this  maximal
quotient.  We now construct  a new presentation of  the same group, by
introducing  the  generators  in  this  power-commutator presentation,
together with  their definitions as powers  or commutators  of earlier
generators.  It is this new presentation that  we use as input for the
Knuth-Bendix program.  Again we  use the recursive ordering, but  this
time we will  be careful to  introduce the  generators  in the correct
order in the first place!
<pre>
    gap&gt; F:=FreeGroup("h","g","f","e","d","c","b","a");;
    gap&gt; h:=F.1;;g:=F.2;;f:=F.3;;e:=F.4;;d:=F.5;;c:=F.6;;b:=F.7;;a:=F.8;;
    gap&gt; G:=F/[Comm(b,a)*c^-1, Comm(c,a)*d^-1, Comm(d,a)*e^-1,
    &gt; Comm(e,b)*f^-1, Comm(f,a)*g^-1, Comm(g,b)*h^-1,
    &gt; Comm(g,a), Comm(c,b), Comm(e,a)];;
    gap&gt; R:=KBMAGRewritingSystem(G);                     
    rec(
               isRWS := true,
      generatorOrder := [_g1,_g2,_g3,_g4,_g5,_g6,_g7,_g8,_g9,_g10,
			 _g11,_g12,_g13,_g14,_g15,_g16],
            inverses := [_g2,_g1,_g4,_g3,_g6,_g5,_g8,_g7,_g10,_g9,
			 _g12,_g11,_g14,_g13,_g16,_g15],
            ordering := "shortlex",
           equations := [
             [_g14*_g16*_g13,_g11*_g16],
             [_g12*_g16*_g11,_g9*_g16],
             [_g10*_g16*_g9,_g7*_g16],
             [_g8*_g14*_g7,_g5*_g14],
             [_g6*_g16*_g5,_g3*_g16],
             [_g4*_g14*_g3,_g1*_g14],
             [_g4*_g16,_g16*_g4],
             [_g12*_g14,_g14*_g12],
             [_g8*_g16,_g16*_g8]
           ]
    )
    gap&gt; SetOrderingOfKBMAGRewritingSystem(R,"recursive");
</pre>
A little experimentation reveals that this example works  best  when
only those equations with left and right hand sides of lengths at most
10 are kept.
<pre>
    gap&gt; O:=OptionsRecordOfKBMAGRewritingSystem(R);
    gap&gt; O.maxstoredlen:=[10,10];;
    gap&gt; SetInfoLevel(InfoRWS,2);
    gap&gt; KnuthBendix(R);
      # 60 eqns; total len: lhs, rhs = 129, 143; 25 states; 0 secs.
      # 68 eqns; total len: lhs, rhs = 364, 326; 28 states; 0 secs.
      # 77 eqns; total len: lhs, rhs = 918, 486; 45 states; 0 secs.
      # 91 eqns; total len: lhs, rhs = 728, 683; 58 states; 0 secs.
      # 102 eqns; total len: lhs, rhs = 1385, 1479; 89 states; 0 secs.
      . . . .
      # 310 eqns; total len: lhs, rhs = 4095, 4313; 489 states; 1 secs.
      # 200 eqns; total len: lhs, rhs = 2214, 2433; 292 states; 1 secs.
      # 194 eqns; total len: lhs, rhs = 835, 922; 204 states; 1 secs.
      # 157 eqns; total len: lhs, rhs = 702, 723; 126 states; 1 secs.
      # 151 eqns; total len: lhs, rhs = 553, 444; 107 states; 1 secs.
      # 101 eqns; total len: lhs, rhs = 204, 236; 19 states; 1 secs.
      #No new eqns for some time - testing for confluence
      #System is not confluent.
      # 172 eqns; total len: lhs, rhs = 616, 473; 156 states; 1 secs.
      # 171 eqns; total len: lhs, rhs = 606, 472; 156 states; 1 secs.
      #No new eqns for some time - testing for confluence
      #System is not confluent.
      # 151 eqns; total len: lhs, rhs = 452, 453; 92 states; 1 secs.
      # 151 eqns; total len: lhs, rhs = 452, 453; 92 states; 1 secs.
      #No new eqns for some time - testing for confluence
      #System is not confluent.
      # 101 eqns; total len: lhs, rhs = 200, 239; 15 states; 1 secs.
      # 101 eqns; total len: lhs, rhs = 200, 239; 15 states; 1 secs.
      #No new eqns for some time - testing for confluence
    #System is confluent.
    #Halting with 101 equations.
    WARNING: The monoid defined by the presentation may have changed,
             since equations have been discarded.
             If you re-run, include the original equations.
      #Exit status is 0
    #I  External Knuth-Bendix program complete.
    #WARNING: Because of the control parameters you set, the system may
    #         not be confluent. Unbind the parameters and re-run KnuthBendix
    #         to check!
    #I  System computed is NOT confluent.
    false

    #Now it is essential to re-run with the `maxstoredlen' limit removed
    #to check that the system really is confluent.
    gap&gt; Unbind(O.maxstoredlen);
    gap&gt; KnuthBendix(R);
      # 101 eqns; total len: lhs, rhs = 200, 239; 15 states; 0 secs.
      #No new eqns for some time - testing for confluence
    #System is confluent.
    #Halting with 101 equations.
    #Exit status is 0
    #I  External Knuth-Bendix program complete.
    #I  System computed is confluent.
    true

    #In fact, in this case, we did have a confluent set already.
</pre>
Inspection  of the confluent  set now  reveals it   to be  precisely a
power-commutator presentation  of  a nilpotent  group,  and so we have
proved that the group we started with really is nilpotent.  Of course,
this means also that it is equal to its largest nilpotent quotient, of
which we already know the structure.
<p>
<code>Example 5</code>
<p>
Our final example illustrates the use of the <code>AutomaticStructure</code> command, which
runs  the   automatic groups  programs.    The  group  has  a balanced
symmetrical presentation with 3   generators and 3 relators,  and  was
originally proposed  by  Heineken as a  possible  example of a  finite
group with such a presentation. In fact, the <code>AutomaticStructure</code> command proves
it to be infinite.
<p>
This  example is of intermediate difficulty,  but there is  no need to
use any special options.  It takes  a few minutes to  run on a
WorkStation. It works better with the optional <var>large</var> parameter of
<code>AutomaticStructure</code> set to <code>true</code>. 
<p>
We will not attempt to explain  all of the  output in detail here; the
interested user should  consult the documentation  for the stand-alone
KBMAG  package. Roughly speaking,  it  first runs the  Knuth-Bendix
program, which does not halt with a confluent rewriting system, but is
used instead to construct a   word-difference finite state  automaton.
This  in  turn is used  to construct  the word-acceptor and multiplier
automata for the  group.    Sometimes the initial   constructions  are
incorrect, and  part of the  procedure consists in checking  for this,
and making corrections. In fact, in this example, the correct automata
are considerably  smaller than the  ones first constructed.  The final
stage is to run   an axiom-checking program, which  essentially checks
that the  automata  satisfy  the  group relations.  If this  completes
successfully,  then the correctness of   the automata has been proved,
and they can be used for correct word-reduction and enumeration in the
group.
<pre>
    gap&gt; F:=FreeGroup("a","b","c");;
    gap&gt; a:=F.1;;b:=F.2;;c:=F.3;;
    gap&gt; G:=F/[Comm(a,Comm(a,b))*c^-1, Comm(b,Comm(b,c))*a^-1,
    &gt;                 Comm(c,Comm(c,a))*b^-1];;
    gap&gt; R:=KBMAGRewritingSystem(G);
    rec(
               isRWS := true,
             verbose := true,
      generatorOrder := [_g1,_g2,_g3,_g4,_g5,_g6],
            inverses := [_g2,_g1,_g4,_g3,_g6,_g5],
            ordering := "shortlex",
           equations := [
             [_g2*_g4*_g2*_g3*_g1,_g5*_g4*_g2*_g3],
             [_g4*_g6*_g4*_g5*_g3,_g1*_g6*_g4*_g5],
             [_g6*_g2*_g6*_g1*_g5,_g3*_g2*_g6*_g1]
           ]
    )
    gap&gt; SetInfoLevel(InfoRWS,1);
    gap&gt; AutomaticStructure(R,true);
    #I  Calling external automatic groups program.
    #Running Knuth-Bendix Program
     (pathname)/kbprog -mt 20 -hf 100 -cn 0 -wd -me 262144 -t 500 (filename)
    #Halting with 42317 equations.
    #First word-difference machine with 271 states computed.
    #Second word-difference machine with 271 states computed.
    #System is confluent, or halting factor condition holds.
    
    #Running program to construct word-acceptor and multiplier automata
     (pathname)/gpmakefsa -l (filename)
    #Word-acceptor with 1106 states computed.
    #General multiplier with 2428 states computed.
    #Validity test on general multiplier succeeded.
    #Running program to verify axioms on the automatic structure
     (pathname)/gpaxioms -l (filename)
    #General length-2 multiplier with 2820 states computed.
    #Checking inverse and short relations.
    #Checking relation:  _g2*_g4*_g2*_g3*_g1 = _g5*_g4*_g2*_g3
    #Checking relation:  _g4*_g6*_g4*_g5*_g3 = _g1*_g6*_g4*_g5
    #Checking relation:  _g6*_g2*_g6*_g1*_g5 = _g3*_g2*_g6*_g1
    #Axiom checking succeeded.
    #I  Computation was successful - automatic structure computed.
    #Minimal reducible word acceptor with 1058 states computed.
    #Minimal Knuth-Bendix equation fsa with 1891 states computed.
    #Correct diff1 fsa with 271 states computed.
    #Correct diff2 fsa with 271 states computed.
    true

    gap&gt; Size(R);
    infinity
    gap&gt; Order(R,a);
    infinity
    gap&gt; Order(R,Comm(a,b));
    infinity

</pre>
<p>
<p>
<h2><a name="SECT010">1.10 Subgroups, cosets and subgroup presentations</a></h2>
<p><p>
This functions in this section are currently only applicable when the
rewriting system is defined from a group <var>G</var>.
<p>
It is possible to use the Knuth-Bendix and Automatic groups program
on cosets  of a specified subgroup <var>H</var> of <var>G</var>. Most of the
functions in the preceding sections have analogues for cosets rather
than for elements. It is also possible sometimes to compute a complete
rewriting system or a subgroup presentation of <var>H</var>.
<p>
<a name = "SSEC010.1"></a>
<li><code>SubgroupOfKBMAGRewritingSystem( </code><var>rws</var><code>, </code><var>H</var><code> ) F</code>
<p>
The subgroup <var>H</var> of the group <var>G</var> (= <code>SemigroupOfRewritingSystem(</code><var>rws</var><code>)</code>)
from which <var>rws</var> is defined can be specified either as a subgroup of
<var>G</var> or as a list of elements of <var>G</var> that generate <var>H</var>, or as a subgroup of
<var>F</var> = <code>FreeStructureOfRewritingSystem(</code><var>rws</var><code>)</code> that maps onto <var>H</var>, or as
a list of elements of <var>F</var> that generate a subgroup mapping onto <var>H</var>.
<p>
<code>SubgroupOfKBMAGRewritingSystem</code> returns a rewriting system <var>subrws</var> for <var>H</var>,
but <var>subrws</var> has no rules, and is only intended to be used as a parameter
in the functions that follow.
<p>
<a name = "SSEC010.2"></a>
<li><code>ResetRewritingSystemOnCosets( </code><var>rws</var><code>, </code><var>subrws</var><code> ) F</code>
<p>
This function resets <var>subrws</var> back to its form as it
was before the application of <code>KnuthBendixOnCosets</code> or
<code>AutomaticStructureOnCosets</code>.
The normal form and  reduction algorithms on cosets will  be
unavailable after  this call.
<p>
Any optional control parameters set for <var>rws</var> will automatically be used when
applying the Knuth-Bendix and Automatic Structure functions on cosets,
that are now to be described.
<p>
<p>
<h2><a name="SECT011">1.11 The Knuth-Bendix program on cosets</a></h2>
<p><p>
<a name = "I8"></a>

<a name = "SSEC011.1"></a>
<li><code>KnuthBendixOnCosets( </code><var>rws</var><code>, </code><var>subrws</var><code> ) O</code>
<p>
<a name = "SSEC011.2"></a>
<li><code>KnuthBendixOnCosetsWithSubgroupRewritingSystem( </code><var>rws</var><code>, </code><var>subrws</var><code> ) O</code>
<p>
Run the external Knuth-Bendix program  on the rewriting system  <var>rws</var>
with respect to the cosets of the subgroup corresponding to <var>subrws</var>.
<code>KnuthBendixOnCosets</code>  returns  true  if it  finds   a  confluent rewriting
system  on coset representatives, and otherwise false.
<p>
If <code>KnuthBendixOnCosets</code> halts without finding a confluent system, but still
manages to output the current system and update <var>rws</var>, then it is possible to
use the  resulting   rewriting system  to  reduce  coset representatives,  and  
count  and enumerate   the irreducible coset representatives;
it  cannot   be guaranteed that the
irreducible coset representatives are all in normal form, however.
<p>
<code>KnuthBendixOnCosetsWithSubgroupRewritingSystem</code> does the same and, in
addition, tries to compute a confluent rewriting system for the subgroup <var>H</var>.
<p>
<a name = "SSEC011.3"></a>
<li><code>RewritingSystemOfSubgroupOfKBMAGRewritingSystem( </code><var>rws</var><code>, </code><var>subrws</var><code> ) F</code>
<p>
This can only be used after a successful call of
<code>KnuthBendixOnCosetsWithSubgroupRewritingSystem</code>.
It returns a confluent rewriting system for <var>H</var> on a generating set
corresponding to the generators of <var>H</var> that were used to define <var>subrws</var>.
<p>
<p>
<h2><a name="SECT012">1.12 The automatic cosets program</a></h2>
<p><p>
<a name = "I9"></a>

<a name = "SSEC012.1"></a>
<li><code>AutomaticStructureOnCosets(</code><var>rws</var><code>, </code><var>subrws</var><code>, [</code><var>large</var><code>], [</code><var>filestore</var><code>], [</code><var>diff1</var><code>]) O</code>
<p>
<a name = "SSEC012.2"></a>
<li><code>AutomaticStructureOnCosetsWithSubgroupPresentation(</code><var>rws</var><code>, </code><var>subrws</var><code>, [</code><var>large</var><code>], [</code><var>filestore</var><code>], [</code><var>diff1</var><code>]) O</code>
<p>
Run  the  external automatic cosets  program  on  the rewriting system
<var>rws</var> with respect to the cosets of the subgroup <var>H</var> from which <var>subrws</var>
was defined.
<code>AutomaticStructureOnCosets</code> returns true if successful and false otherwise.
<p>
The optional parameters to <code>AutomaticStructureOnCosets</code> are the same as for
<code>AutomaticStructure</code>.
<p>
The ordering of <var>rws</var> must be ``shortlex".
<p>
<code>AutomaticStructureOnCosetsWithSubgroupPresentation</code> does the same and, in
addition, tries to compute a presentation of the subgroup <var>H</var>.
<p>
<a name = "SSEC012.3"></a>
<li><code>PresentationOfSubgroupOfKBMAGRewritingSystem( </code><var>rws</var><code>, </code><var>subrws</var><code> ) F</code>
<p>
This can only be used after a successful call of
<code>AutomaticStructureOnCosetsWithSubgroupPresentation</code>.
It returns a presentation for <var>H</var>, but this is not on the generators
used to define <var>H</var>.
<p>
<p>
<h2><a name="SECT013">1.13 Word reduction on cosets</a></h2>
<p><p>
<a name = "SSEC013.1"></a>
<li><code>IsReducedCosetRepresentative( </code><var>rws</var><code>, </code><var>subrws</var><code>, </code><var>w</var><code> ) A</code>
<p>
Test  whether the word <var>w</var> in  the generators of  the freestructure
<code>FreeStructure(</code><var>rws</var><code>)</code> of the rewriting system system
<var>rws</var> is reduced or not as a coset representative of the subgroup <var>H</var>
of <var>G</var>, and return true or false.
<p>
<code>IsReducedCosetRepresentative</code> can only be used after
<code>KnuthBendixOnCosets</code> or <code>AutomaticStructureOnCosets</code> has been run
successfully on <var>rws</var> and <var>subrws</var>. In the former case, if
<code>KnuthBendixOnCosets</code> halted without a  confluent set of rules, then 
irreducible words are not necessarily in  normal form (but  reducible  words
are  definitely  not in  normal form).  If  <code>KnuthBendixOnCosets</code> completes
with    a  confluent rewriting system  or <code>AutomaticStructureOnCosets</code>
completes  successfully, then  it is guaranteed that  all irreducible words
are in normal form.
<p>
<p>
<a name = "SSEC013.2"></a>
<li><code>ReducedFormOfCosetRepresentative( </code><var>rws</var><code>, </code><var>subrws</var><code>, </code><var>w</var><code> ) O</code>
<a name = "SSEC013.2"></a>
<li><code>ReducedCosetRepresentative( </code><var>rws</var><code>, </code><var>subrws</var><code>, </code><var>w</var><code> ) O</code>
<p>
Reduce the word  <var>w</var> in the generators of the free structure
<code>FreeStructure(</code><var>rws</var><code>)</code> of the rewriting system  <var>rws</var>
as a coset representative of the subgroup <var>H</var> from which <var>subrws</var>
was defined, and return the result.
<p>
<code>ReducedFormOfCosetRepresentative</code> can only be used after
<code>KnuthBendixOnCosets</code> or <code>AutomaticStructureOnCosets</code> has been run
successfully on <var>rws</var> and <var>subrws</var>.
In the former case, if  <code>KnuthBendixOnCosets</code> halted
without  a confluent  set of  rules, then the   irreducible word returned is 
not necessarily in  normal   form.  If <code>KnuthBendixOnCosets</code>  completes  
with  a confluent rewriting  system or  <code>AutomaticStructureOnCosets</code> 
completes  successfully, then it  is guaranteed that all irreducible words are
in normal form.
<p>
<p>
<h2><a name="SECT014">1.14 Counting and enumerating irreducible words for cosets</a></h2>
<p><p>
<a name = "SSEC014.1"></a>
<li><code>Index( </code><var>rws</var><code>, </code><var>subrws</var><code> ) M</code>
<p>
Returns the number of irreducible words for coset represenatitives of the
subgroup <var>H</var> of <var>G</var> corresponding to <var>subrws</var>.
<p>
<code>Index</code>   can only be  used  after <code>KnuthBendixOnCosets</code>  or
<code>AutomaticStructureOnCosets</code> has been run
successfully  on <var>rws</var> and <var>subrws</var>.
In  the former case, if  <code>KnuthBendixOnCosets</code> halted without a
confluent  set of rules, then the  number of  irreducible words may be
greater than the number of words in normal form (which is equal to the
index  of <var>H</var> in <var>G</var>).  If <code>KnuthBendixOnCosets</code>  completes with a
confluent rewriting system  or <code>AutomaticStructureOnCosets</code> completes
successfully, then
it is  guaranteed that <code>Index</code> will  return the correct index of <var>H</var>
in <var>G</var>.
<p>
<p>
<a name = "SSEC014.2"></a>
<li><code>EnumerateReducedCosetRepresentatives(</code><var>rws</var><code>, </code><var>subrws</var><code>, </code><var>min</var><code>, </code><var>max</var><code>) O</code>
<p>
Enumerate  all  irreducible words for coset representatives of <var>H</var> in <var>G</var>,
that have   lengths between <var>min</var> and <var>max</var>    (inclusive), which should be
non-negative integers.    The result is returned  as  a list of words.
The enumeration is by depth-first search  of a finite state automaton,
and so  the words in the  list returned  are ordered lexicographically
(not by shortlex).
<p>
<code>EnumerateReducedCosetRepresentatives</code> can only be used after
<code>KnuthBendixOnCosets</code> or <code>AutomaticStructureOnCosets</code> has been run
successfully on <var>rws</var> and <var>subrws</var>.
In  the former case,  if <code>KnuthBendixOnCosets</code> halted  without a
confluent set of  rules, then not all irreducible   words in the  list
returned will necessarily be in normal form.
If <code>KnuthBendixOnCosets</code> completes with a
confluent rewriting  system or <code>AutomaticStructureOnCosets</code>
completes successfully, then
it is guaranteed that all words in the list will be in normal form.
<p>
<p>
<a name = "SSEC014.3"></a>
<li><code>GrowthFunctionOfCosetRepresentatives( </code><var>rws</var><code>, </code><var>subrws</var><code> ) F</code>
<p>
Returns the growth function of the set of irreducible words 
for coset representatives of <var>H</var> in <var>G</var>, where <var>subrws</var> and <var>rws</var> are
the rewriting systems for <var>H</var> and <var>G</var>.
This is a rational function, of which
the coefficient of <var>x<sup>n</sup></var> in its Taylor expansion is equal to the number of
coset representatives words of length <var>n</var>.
<p>
If the coefficients in this rational function are larger than about 16000
then strange error messages will appear and fail will be returned.
<p>
<code>GrowthFunctionOfCosetRepresentatives</code> can only be used after
<code>KnuthBendixOnCosets</code> or <code>AutomaticStructureOnCosets</code> has been run
successfully on <var>rws</var> and <var>subrws</var>.
In  the former case,  if <code>KnuthBendixOnCosets</code> halted  without a
confluent set of  rules, then not all irreducible   words in the  list
returned will necessarily be in normal form.
If <code>KnuthBendixOnCosets</code> completes with a confluent rewriting  system or
<code>AutomaticStructureOnCosets</code> completes successfully, then
it is guaranteed that all words in the list will be in normal form.
<p>
<p>
<h2><a name="SECT015">1.15 Examples of the Use of Rewriting System On Cosets</a></h2>
<p><p>
<a name = "I10"></a>

<code>Example 1</code>
<p>
<pre>
gap&gt; F:=FreeGroup("a","b","c");;
gap&gt; a:=F.1;;b:=F.2;;c:=F.3;;
gap&gt; G := F/[b^3,c^3,(b*c)^4,(b*c^-1)^5,a^-1*b^-1*c*b*c*b^-1*c*b*c^-1];
&lt;fp group on the generators [ a, b, c ]&gt;
gap&gt; R:=KBMAGRewritingSystem(G);
rec(
           isRWS := true,
          silent := true,
  generatorOrder := [_g1,_g2,_g3,_g4,_g5,_g6],
        inverses := [_g2,_g1,_g4,_g3,_g6,_g5],
        ordering := "shortlex",
       equations := [
         [_g3^2,_g4],
         [_g5^2,_g6],
         [_g3*_g5*_g3*_g5,_g6*_g4*_g6*_g4],
         [_g3*_g6*_g3*_g6*_g3,_g5*_g4*_g5*_g4*_g5],
         [_g2*_g4*_g5*_g3*_g5,_g5*_g4*_g6*_g3]
       ]
)
gap&gt; S:=SubgroupOfKBMAGRewritingSystem(R,[a^3,c*a^2]);  
rec(
           isRWS := true,
          silent := true,
  generatorOrder := [_x1,_X1,_x2,_X2],
        inverses := [_X1,_x1,_X2,_x2],
        ordering := "shortlex",
       equations := [
       ]
)
gap&gt; KnuthBendixOnCosetsWithSubgroupRewritingSystem(R,S);
true
gap&gt; Index(R,S);
18
gap&gt; IsReducedCosetRepresentative(R,S,b*a*b*a);
false
gap&gt; ReducedFormOfCosetRepresentative(R,S,b*a*b*a);
b^-1*a^-1
gap&gt; EnumerateReducedCosetRepresentatives(R,S,0,4);
[ &lt;identity ...&gt;, a, a*b, a*b*c, a*b^-1, a^-1, a^-1*b, a^-1*b*c, a^-1*b^-1, 
  b, b*c, b*c*a, b*c*a^-1, b*c^-1, b^-1, b^-1*a, b^-1*a^-1, b^-1*a^-1*b ]
gap&gt; SS:=RewritingSystemOfSubgroupOfKBMAGRewritingSystem(R,S);;
gap&gt; Size(SS);
60
</pre>
<p>
<code>Example 2</code>
<p>
We find a free subgroup of the Fibonacci group <var>F(2,8)</var>. This example may
take about 20 minutes to run on a typical WorkStation.
<pre>
gap&gt; F:=FreeGroup(8);;
gap&gt; a:=F.1; b:=F.2; c:=F.3; d:=F.4; e:=F.5; f:=F.6; g:=F.7; h:=F.8;
gap&gt; G := F/[a*b*c^-1, b*c*d^-1, c*d*e^-1, d*e*f^-1,
&gt;            e*f*g^-1, f*g*h^-1, g*h*a^-1, h*a*b^-1];
gap&gt; R:=KBMAGRewritingSystem(G);;
gap&gt; S:=SubgroupOfKBMAGRewritingSystem(R,[a,e]);;
gap&gt; AutomaticStructureOnCosetsWithSubgroupPresentation(R,S);
gap&gt; P:=PresentationOfSubgroupOfKBMAGRewritingSystem(R,S);
&lt;fp group on the generators [ f1, f3 ]&gt;
gap&gt; RelatorsOfFpGroup(P);
[  ]
gap&gt; Index(R,S);                                 
infinity

</pre>
<p>
<p>
<h2><a name="SECT016">1.16 Functions for manipulating finite state automata</a></h2>
<p><p>
<a name = "I11"></a>

The KBMAG package contains <font face="Gill Sans,Helvetica,Arial">GAP</font> interfaces to many of the functions
for manipulating finite state automata (fsa) that are available in the
standalone. We shall list these here, without giving much detail.
For more detail, the user could try looking in the source file
<code>gap/fsa4.g</code>.
fsa are currently implemented as <font face="Gill Sans,Helvetica,Arial">GAP</font> records, as they were
previously in <font face="Gill Sans,Helvetica,Arial">GAP</font>3. This interface may be updated to the style of
<font face="Gill Sans,Helvetica,Arial">GAP</font>4 at some stage. (Note that the abbreviation fsa will be used for
both singular and the plural.)
<p>
The alphabet of an fsa is itself a record that must contain at least
the two components <code>type</code> and <code>size</code>, where <code>type</code> is a string, and
<code>size</code> a positive integer. The easiest possibility is to use the
type ``simple", and then no other record components are necessary.
There are several more complicated possibilities, which are used by
the other rewriting system functions. For example, there is the type
``identifiers", for which fields ``format" and ``names" are necessary.
For example
<pre>
    gap&gt; M:=FreeMonoid(3);;
    gap&gt; alph := rec(type:="identifiers", size:=3,
                     format:="dense", names:=[M.1,M.2,M.3] );;
</pre>
defines a valid alphabet for an fsa.
The members of the alphabet are referred to as <code>letters</code>, and can be
represented either by a positive integer or by their name (usually
a generator of a free group or monoid) if they have one.
<p>
The functions <code>ReductionAutomaton(</code><var>rws</var><code>)</code>,  <code>WordAcceptor(</code><var>rws</var><code>)</code>,
<code>FirstWordDifferenceAutomaton(</code><var>rws</var><code>)</code>, <code>SecondWordDifferenceAutomaton(</code><var>rws</var><code>)</code>
and <code>GeneralMultiplie(</code><var>rws</var><code>)</code> mentioned in earlier sections all
return a fsa. The other possibilities for the user to construct
a fsa are to use the function <code>FSA</code> or to read one in from a file.
In the latter case, the user must immediately call <code>InitializeFSA</code>
on the record that has been read in. For example, running <font face="Gill Sans,Helvetica,Arial">GAP</font> from the
package directory:
<pre>
    gap&gt; Read("standalone/fsa_data/fsa_2");
    gap&gt; InitializeFSA(fsa_2);
</pre>
<p>
<a name = "SSEC016.1"></a>
<li><code>IsInitializedFSA( </code><var>fsa</var><code> ) F</code>
<p>
Tests whether <var>fsa</var> is a record describing a valid initialized fsa.
<p>
<a name = "SSEC016.2"></a>
<li><code>InitializeFSA( </code><var>fsa</var><code> ) F</code>
<p>
Initializes a record representing a fsa that has been read in from
a file.
<p>
<a name = "SSEC016.3"></a>
<li><code>FSA( </code><var>alph</var><code> ) F</code>
<p>
Returns an initialized fsa with alphabet <var>alph</var> having one state that is
an initial and final state, and no transitions (edges).
<p>
The arguments of the following functions must be initialized fsa.
<p>
<a name = "SSEC016.4"></a>
<li><code>WriteFSA( </code><var>fsa</var><code> )</code>
<p>
Displays <var>fsa</var> nicely. (In a proper implementation, this would be the
<code>ViewObj</code> function.)
<p>
<a name = "SSEC016.5"></a>
<li><code>IsDeterministicFSA( </code><var>fsa</var><code> ) F</code>
<p>
Tests whether <var>fsa</var> is a deterministic fsa.
Many of the functions below work only for deterministic fsa.
A deterministic fsa with the same language as <var>fsa</var> can
be constructed with the function <code>DeterminizeFSA</code>.
<p>
<a name = "SSEC016.6"></a>
<li><code>AlphabetFSA( </code><var>fsa</var><code> ) F</code>
<p>
<a name = "SSEC016.7"></a>
<li><code>StatesFSA( </code><var>fsa</var><code> ) F</code>
<p>
Return, respectively, the records representing the alphabet and state-set
of <var>fsa</var>.
<p>
<a name = "SSEC016.8"></a>
<li><code>NumberOfStatesFSA( </code><var>fsa</var><code> ) F</code>
<p>
Returns the number of states of <var>fsa</var>.
<p>
<a name = "SSEC016.9"></a>
<li><code>NumberOfLettersFSA( </code><var>fsa</var><code> ) F</code>
<p>
<a name = "SSEC016.10"></a>
<li><code>SizeOfAlphabetFSA( </code><var>fsa</var><code> ) F</code>
<p>
Returns the size of the alphabet of <var>fsa</var>.
<p>
<a name = "SSEC016.11"></a>
<li><code>AcceptingStatesFSA( </code><var>fsa</var><code> ) F</code>
<p>
Returns the list of accepting states of <var>fsa</var>.
<p>
<a name = "SSEC016.12"></a>
<li><code>InitialStatesFSA( </code><var>fsa</var><code> ) F</code>
<p>
Returns the list of initial states of <var>fsa</var>.
<p>
<a name = "SSEC016.13"></a>
<li><code>DenseDTableFSA( </code><var>fsa</var><code> ) F</code>
<p>
<var>fsa</var> must be deterministic. The transition table is returned as a list
of lists, where the <var>e</var>-th entry in the <var>s</var>-th inner list is
<code>TargetDFA(</code><var>fsa</var><code>,</code><var>e</var><code>,</code><var>s</var><code>)</code> (see below).
<p>
<a name = "SSEC016.14"></a>
<li><code>SparseTableFSA( </code><var>fsa</var><code> ) F</code>
<p>
The transition table is returned as a list of lists,
where each entry in the <var>s</var>-th inner list is
is a two-element list <code>[</code><var>e</var><code>,</code><var>t</var><code>]</code> of integers that represents a transition
from state number <var>s</var> to state number <var>t</var> under letter number <var>e</var>.
We can also have <var>e</var>=0, representing transitions with no label
(<var>epsilon</var> transitions).
<p>
<a name = "SSEC016.15"></a>
<li><code>TargetDFA( </code><var>fsa</var><code>, </code><var>e</var><code>, </code><var>s</var><code> ) F</code>
<p>
<var>fsa</var> must be a deterministic fsa, <var>e</var> should be a number or name
of a letter of the alphabet, and <var>s</var> a number of a state of <var>fsa</var>.
The target of <var>s</var> under <var>e</var> is returned, or 0 if there is no target.
<p>
<a name = "SSEC016.16"></a>
<li><code>TargetsFSA( </code><var>fsa</var><code>, </code><var>e</var><code>, </code><var>s</var><code> ) F</code>
<p>
Similar to <code>TargetDFA</code>, but <var>fsa</var> need not be deterministic, and a list
of targets is returned.
<p>
<a name = "SSEC016.17"></a>
<li><code>SourcesFSA( </code><var>fsa</var><code>, </code><var>e</var><code>, </code><var>s</var><code> ) F</code>
<p>
Similar to <code>TargetsFSA</code>, but the list of sources of transitions to <var>s</var>
under <var>e</var> is returned. <var>e</var> can also be zero here.
<p>
<a name = "SSEC016.18"></a>
<li><code>WordTargetDFA( </code><var>fsa</var><code>, </code><var>w</var><code> ) F</code>
<p>
<var>fsa</var> must be a deterministic fsa, and <var>w</var> should be a list of integers
or a word in the alphabet (in the case when the alphabet is defined
from a free group or monoid). The target of the initial state of <var>fsa</var>
under <var>w</var> is returned, or 0 if there is no such target.
<p>
<a name = "SSEC016.19"></a>
<li><code>IsAcceptedWordDFA( </code><var>fsa</var><code>, </code><var>w</var><code> ) F</code>
<p>
<var>fsa</var> must be a deterministic fsa, and <var>w</var> should be a list of integers
or a word in the alphabet (in the case when the alphabet is defined
from a free group or monoid). This function tests whether <var>w</var> is in
the language of <var>fsa</var>.
<p>
<a name = "SSEC016.20"></a>
<li><code>AddStateFSA( </code><var>fsa</var><code> ) F</code>
<p>
Adds an extra non-accepting state to <var>fsa</var> with no transitions to or from it.
<p>
<a name = "SSEC016.21"></a>
<li><code>DeleteStateFSA( </code><var>fsa</var><code> ) F</code>
<p>
Deletes the highest numbered state together with all transitions to and from
it from <var>fsa</var>. Use <code>PermuteStatesFSA</code> first to delete a different state.
<p>
<a name = "SSEC016.22"></a>
<li><code>PermuteStatesFSA( </code><var>fsa</var><code>, </code><var>p</var><code> )</code>
<p>
<var>p</var> should be a permutation of <code>[1..ns]</code>, where <var>fsa</var> has <var>ns</var> states.
The states are permuted, where the original state number <var>n</var> becomes
the new state number <var>n<sup>p</sup></var>.
<p>
<a name = "SSEC016.23"></a>
<li><code>AddLetterFSA( </code><var>fsa</var><code> [,</code><var>name</var><code>] ) F</code>
<p>
Adds an extra letter to the alphabet of <var>fsa</var> with no associated transitions.
If the alphabet of <var>fsa</var> is defined over a free group or monoid, then
<var>name</var> specifies the element of this free structure corresponding to
the new letter.
<p>
<a name = "SSEC016.24"></a>
<li><code>DeleteLetterFSA( </code><var>fsa</var><code> ) F</code>
<p>
Deletes the highest numbered letter together with all associated transitions
from the alphabet of <var>fsa</var>. Use <code>PermuteLettersFSA</code> first to delete a
different letter.
<p>
<a name = "SSEC016.25"></a>
<li><code>PermuteLettersFSA( </code><var>fsa</var><code>, </code><var>p</var><code> )</code>
<p>
<var>p</var> should be a permutation of <code>[1..na]</code>, where the alphabet of
<var>fsa</var> has <var>na</var> letters.
The letters are permuted, where the original letter number <var>n</var> becomes
the new letter number <var>n<sup>p</sup></var>.
<p>
<a name = "SSEC016.26"></a>
<li><code>AddEdgeFSA( </code><var>fsa</var><code>, </code><var>e</var><code>, </code><var>s</var><code>, </code><var>t</var><code>  ) F</code>
<p>
Adds an extra transition to <var>fsa</var> with source <var>s</var>, target <var>t</var>
and letter <var>e</var>. If there is already such a transition, then this function
does nothing.
<p>
<a name = "SSEC016.27"></a>
<li><code>DeleteEdgeFSA( </code><var>fsa</var><code>, </code><var>e</var><code>, </code><var>s</var><code>, </code><var>t</var><code>  ) F</code>
<p>
Deletes the transition from <var>fsa</var> with source <var>s</var>, target <var>t</var>
and letter <var>e</var> if there is one.
<p>
<a name = "SSEC016.28"></a>
<li><code>SetAcceptingFSA( </code><var>fsa</var><code>, </code><var>s</var><code>, </code><var>flag</var><code> ) F</code>
<p>
<var>flag</var> should be true or false, and state number <var>s</var> is made accepting
or non-accepting, respectively.
<p>
<a name = "SSEC016.29"></a>
<li><code>SetInitialFSA( </code><var>fsa</var><code>, </code><var>s</var><code>, </code><var>flag</var><code> ) F</code>
<p>
<var>flag</var> should be true or false, and state number <var>s</var> is made initial
or non-initial, respectively.
<p>
<a name = "SSEC016.30"></a>
<li><code>IsAccessibleFSA( </code><var>fsa</var><code> ) F</code>
<p>
Tests whether <var>fsa</var> is accessible; that is, whether all states can be
reached from the initial states.
<p>
<a name = "SSEC016.31"></a>
<li><code>AccessibleFSA( </code><var>fsa</var><code> ) F</code>
<p>
Removes all inaccessible states from <var>fsa</var> thus rendering it accessible
without altering its language.
<p>
<a name = "SSEC016.32"></a>
<li><code>IsTrimFSA( </code><var>fsa</var><code> ) F</code>
<p>
Tests whether <var>fsa</var> is trim; that is, whether all states can be
reached from the initial states, and a final state can be reached from
all states.
<p>
<a name = "SSEC016.33"></a>
<li><code>TrimFSA( </code><var>fsa</var><code> ) F</code>
<p>
Removes all inaccessible states from <var>fsa</var> and all states from which an
accepting state cannot be reached, thus rendering it trim
without altering its language.
<p>
<a name = "SSEC016.34"></a>
<li><code>IsBFSFSA( </code><var>fsa</var><code> ) F</code>
<p>
Tests whether <var>fsa</var> is in <code>bfs</code> (breadth-first-search) form; that is,
whether the initial states come first and the other states
appear in ascending order if one scans the transition table first
by state number and then by alphabet number. Note that <var>fsa</var> must
be accessible for it to be <code>bfs</code>.
<p>
<a name = "SSEC016.35"></a>
<li><code>BFSFSA( </code><var>fsa</var><code> ) F</code>
<p>
Replaces <var>fsa</var> by one with the same language but in <code>bfs</code> form.
This can be useful for comparing the languages of two fsa.
In fact <code>MinimizeFSA</code> and <code>BFSFSA</code> are applied in turn to a
deteministic <var>fsa</var>, then the resulting transition table is
uniquely determined by the language of the <var>fsa</var>.
<p>
<a name = "SSEC016.36"></a>
<li><code>LSizeDFA( </code><var>fsa</var><code> ) F</code>
<p>
The size of the acceted language of <var>fsa</var>, which must be deterministic.
This only works if <var>fsa</var> is trim. If not, then <code>TrimFSA</code> must be called
first.
<p>
<a name = "SSEC016.37"></a>
<li><code>LEnumerateDFA( </code><var>fsa</var><code>, </code><var>min</var><code>, </code><var>max</var><code> ) F</code>
<p>
The words in the language of <var>fsa</var> of length <var>l</var> satisfying
<var>min lel lemax</var> are returned in a list. The words will either
be lists of integers, for ``simple" type alphabets, of lists of
words in the underlying free group or monoid for alphabets of type
``identifiers".
<p>
The remaining fsa functions all call external programs from the
standalone. All of them except <code>DeterminizeFSA</code> take only
deterministic fsa as input, and all of them return deterministic fsa
as output.
<p>
<a name = "SSEC016.38"></a>
<li><code>DeterminizeFSA( </code><var>fsa</var><code> ) F</code>
<p>
Returns a deterministic fsa with the same language as <var>fsa</var>.
<p>
<a name = "SSEC016.39"></a>
<li><code>MinimizeFSA( </code><var>fsa</var><code> ) F</code>
<p>
Returns a fsa with the same language as <var>fsa</var> and a minimal
number of states.
<p>
<a name = "SSEC016.40"></a>
<li><code>NotFSA( </code><var>fsa</var><code> ) F</code>
<p>
Returns a fsa with the same alphabet as <var>fsa</var> whose language is the
complement of that of <var>fsa</var>.
<p>
<a name = "SSEC016.41"></a>
<li><code>StarFSA( </code><var>fsa</var><code> ) F</code>
<p>
Returns a fsa whose language is <var>L<sup>*</sup></var>, where <var>L</var> is the langauge of <var>fsa</var>.
<p>
<a name = "SSEC016.42"></a>
<li><code>ReverseFSA( </code><var>fsa</var><code> ) F</code>
<p>
Returns a fsa whose language consists of the reversed words in the language
of <var>fsa</var>.
<p>
<a name = "SSEC016.43"></a>
<li><code>ExistsFSA( </code><var>fsa</var><code> ) F</code>
<p>
<var>fsa</var> should be two-variable fsa on an alphabet <var>A</var>. An fsa is
returned that accepts a word <var>w<sub>1</sub> inA<sup>*</sup></var> if and only if there exists a
words <var>w<sub>2</sub> inA<sup>*</sup></var> with <var>(w<sub>1</sub>,w<sub>2</sub>)</var> in the language of <var>fsa</var>.
<p>
<a name = "SSEC016.44"></a>
<li><code>SwapCoordsFSA( </code><var>fsa</var><code> ) F</code>
<p>
<var>fsa</var> should be two-variable fsa on an alphabet <var>A</var>. A
two-variable fsa on <var>A</var> is returned that accepts <var>(w<sub>1</sub>,w<sub>2</sub>)</var> if and
only if <var>(w<sub>2</sub>,w<sub>1</sub>)</var> is accepted by <var>fsa</var>.
<p>
<a name = "SSEC016.45"></a>
<li><code>AndFSA( </code><var>fsa1</var><code>, </code><var>fsa2</var><code> ) F</code>
<p>
<var>fsa1</var> and <var>fsa2</var> must have the same alphabet. The returned fsa has
language equal to the interssection of those of <var>fsa1</var> and <var>fsa2</var>.
<p>
<a name = "SSEC016.46"></a>
<li><code>OrFSA( </code><var>fsa1</var><code>, </code><var>fsa2</var><code> ) F</code>
<p>
<var>fsa1</var> and <var>fsa2</var> must have the same alphabet. The returned fsa has
language equal to the union of those of <var>fsa1</var> and <var>fsa2</var>.
<p>
<a name = "SSEC016.47"></a>
<li><code>ConcatFSA( </code><var>fsa1</var><code>, </code><var>fsa2</var><code> ) F</code>
<p>
<var>fsa1</var> and <var>fsa2</var> must have the same alphabet. The returned fsa accepts
words of the form <var>w<sub>1</sub>w<sub>2</sub></var>, where <var>w<sub>1</sub></var> and <var>w<sub>2</sub></var> are in the languages of
<var>fsa1</var> and <var>fsa2</var>, respectively.
<p>
<a name = "SSEC016.48"></a>
<li><code>LanguagesEqualFSA( </code><var>fsa1</var><code>, </code><var>fsa2</var><code> ) F</code>
<p>
<var>fsa1</var> and <var>fsa2</var> must have the same alphabet. This function tests
whether the languages of <var>fsa1</var> and <var>fsa2</var> are equal, and
returns True or false.
<p>
<a name = "SSEC016.49"></a>
<li><code>GrowthFSA( </code><var>fsa</var><code> ) F</code>
<p>
Returns the growth function of <var>fsa</var>. This is a rational function, of which
the the coefficient of <var>x<sup>n</sup></var> in its Taylor expansion is equal to the number
of words of length <var>n</var> in the accepted language of <var>fsa</var>.
<p>
If the coefficients in this rational function are larger than about 16000
then strange error messages will appear and fail will be returned.
<p>
[<a href = "chapters.htm">Up</a>] [<a href = "theindex.htm">Index</a>]
<P>
<address>kbmag manual<br>January 2016
</address></body></html>