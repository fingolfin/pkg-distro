<!-- ------------------------------------------------------------------- -->
<!--                                                                     -->
<!--  groups.xml          Utils documentation                            -->
<!--                                                                     -->
<!--  Copyright (C) 2015-2016, The GAP Group                             --> 
<!--                                                                     -->
<!-- ------------------------------------------------------------------- -->

<?xml version="1.0" encoding="UTF-8"?>

<Chapter Label="chap-groups">
<Heading>Groups and homomorphisms</Heading>



<Section Label="sec-groups">
<Heading>Functions for groups</Heading>


<ManSection>
   <Oper Name="Comm"
         Arg="L" />
<Description>
This method has been transferred from package &ResClasses;. 
<P/>
It provides a method for <C>Comm</C> when the argument is a list 
(enclosed in square brackets), and calls the function <C>LeftNormedComm</C>. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> Comm( [ (1,2), (2,3) ] );
(1,2,3)
gap> Comm( [(1,2),(2,3),(3,4),(4,5),(5,6)] );
(1,5,6)
gap> Comm(Comm(Comm(Comm((1,2),(2,3)),(3,4)),(4,5)),(5,6));  ## the same
(1,5,6)
]]>
</Example>

<ManSection>
   <Oper Name="IsCommuting"
         Arg="a b" />
<Description>
This function has been transferred from package &ResClasses;. 
<P/>
It tests whether two elements in a group commute. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> D12 := DihedralGroup( 12 );
<pc group of size 12 with 3 generators>
gap> SetName( D12, "D12" ); 
gap> a := D12.1;;  b := D12.2;;  
gap> IsCommuting( a, b );
false
]]>
</Example>

<ManSection>
   <Oper Name="ListOfPowers"
         Arg="g exp" />
<Description>
This function has been transferred from package &RCWA;. 
<P/>
The operation <C>ListOfPowers(g,exp)</C> returns the list 
<M>[g,g^2,...,g^{exp}]</M> of powers of the element <M>g</M>.
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> ListOfPowers( 2, 20 );
[ 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384,
 32768, 65536, 131072, 262144, 524288, 1048576 ]
gap> ListOfPowers( (1,2,3)(4,5), 12 );
[ (1,2,3)(4,5), (1,3,2), (4,5), (1,2,3), (1,3,2)(4,5), (),
 (1,2,3)(4,5), (1,3,2), (4,5), (1,2,3), (1,3,2)(4,5), () ]
gap> ListOfPowers( D12.2, 6 );
[ f2, f3, f2*f3, f3^2, f2*f3^2, <identity> of ... ]
]]>
</Example>

<ManSection>
   <Oper Name="GeneratorsAndInverses"
         Arg="G" />
<Description>
This function has been transferred from package &RCWA;. 
<P/>
This operation returns a list containing the generators of <M>G</M> 
followed by the inverses of these generators.  
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> GeneratorsAndInverses( D12 );
[ f1, f2, f3, f1, f2*f3^2, f3^2 ]
gap> GeneratorsAndInverses( SymmetricGroup(5) );     
[ (1,2,3,4,5), (1,2), (1,5,4,3,2), (1,2) ]
]]>
</Example>


<ManSection>
   <Attr Name="UpperFittingSeries"
         Arg="G" />
   <Attr Name="LowerFittingSeries"
         Arg="G" />
   <Attr Name="FittingLength"
         Arg="G" />
<Description>
These three functions have been transferred from package &ResClasses;. 
<P/>
<Index>Fitting series</Index> 
The upper and lower Fitting series and the Fitting length of a solvable
group are described here: 
<URL>https://en.wikipedia.org/wiki/Fitting_length</URL>. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> UpperFittingSeries( D12 );  LowerFittingSeries( D12 );
[ Group([  ]), Group([ f3, f2*f3 ]), Group([ f3, f2*f3, f1 ]) ]
[ D12, Group([ f3 ]), Group([  ]) ]
gap> FittingLength( D12 );
2
gap> S4 := SymmetricGroup( 4 );;
gap> UpperFittingSeries( S4 );
[ Group(()), Group([ (1,2)(3,4), (1,4)(2,3) ]), Group([ (1,2)(3,4), (1,4)
  (2,3), (2,4,3) ]), Group([ (3,4), (2,3,4), (1,2)(3,4) ]) ]
gap> List( last, StructureDescription );
[ "1", "C2 x C2", "A4", "S4" ]
gap> LowerFittingSeries( S4 );
[ Sym( [ 1 .. 4 ] ), Alt( [ 1 .. 4 ] ), Group([ (1,4)(2,3), (1,3)
 (2,4) ]), Group(()) ]
gap> List( last, StructureDescription );
[ "S4", "A4", "C2 x C2", "1" ]
gap> FittingLength( S4);
3
]]>
</Example>

</Section>



<Section Label="sec-homomorphisms">
<Heading>Functions for group homomorphisms</Heading>

<ManSection>
   <Oper Name="EpimorphismByGenerators"
         Arg="G H" />
   <Func Name="EpimorphismByGeneratorsNC" 
         Arg="G H" />
<Description>
These functions have been transferred from package &RCWA;. 
<P/>
They construct a group homomorphism which maps 
the generators of <M>G</M> to those of <M>H</M>. 
Note that <C>EpimorphismByGenerators(G,H)</C> calls 
<C>EpimorphismByGeneratorsNC(G,H)</C> which calls 
<C>
GroupHomomorphismByImagesNC(G,H,GeneratorsOfGroup(G),GeneratorsOfGroup(H))</C>.
Anything may happen if the resulting map is not a homomorphism! 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> G := Group( (1,2,3), (3,4,5), (5,6,7), (7,8,9) );;
gap> phi := EpimorphismByGenerators( FreeGroup("a","b","c","d"), G );
[ a, b, c, d ] -> [ (1,2,3), (3,4,5), (5,6,7), (7,8,9) ]
gap> PreImagesRepresentative( phi, (1,2,3,4,5,6,7,8,9) );
d*c*b*a
gap> a := G.1;; b := G.2;; c := G.3;; d := G.4;;
gap> d*c*b*a;
(1,2,3,4,5,6,7,8,9)
gap> ## note that it is easy to produce nonsense: 
gap> epi := EpimorphismByGenerators( Group((1,2,3)), Group((8,9)) );
[ (1,2,3) ] -> [ (8,9) ]
gap> IsGroupHomomorphism( epi );
true
]]>
</Example>

</Section>




</Chapter>
