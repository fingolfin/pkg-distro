<!-- ------------------------------------------------------------------- -->
<!--                                                                     -->
<!--  intro.xml            Utils documentation            Chris Wensley  -->
<!--                                                                     -->
<!--  version 0.25, 11/02/2016                                           --> 
<!--                                                                     --> 
<!--  Copyright (C) 2015-2016, The GAP Group,                            --> 
<!--                                                                     -->
<!-- ------------------------------------------------------------------- -->

<?xml version="1.0" encoding="UTF-8"?> 

<Chapter Label="chap-intro">

<Heading>Introduction</Heading>

The &Utils; package provides a space for utility functions from a variety 
of &GAP; packages to be collected together into a single package. 
In this way it is hoped that they will become more visible 
to other package authors. 
Any package author who transfers a function to &Utils; will become 
an author of &Utils;. 
<P/> 
A function (or collection of functions) is suitable for transfer 
from a package &Home; to &Utils; 
if the following conditions are satisfied. 
<List>
<Item>
The function does not depend on the remaining functions in &Home; 
</Item>
<Item>
The function does not do what can already be done with a &GAP; library function. 
</Item>
<Item>
Documentation of the function and test examples are available. 
</Item>
<Item>
The function is sufficiently non-specialised so that it might ber of use 
to other authors.
</Item>
</List> 
<P/>

The package is loaded with the command
<Example>
<![CDATA[
gap> LoadPackage( "utils" ); 
]]>
</Example>
<P/>
The current version is &UTILSVERSION; for &GAP; 4.8, 
released on &UTILSLONGRELEASEDATE;. 
<P/> 
The package may be obtained as a compressed tar file 
<File>&UTILSTARFILENAME;</File>
by ftp from one of the following sites: 
<List>
<Item>
any &GAP; archive, e.g. 
<URL>http://www.gap-system.org/Packages/packages.html</URL>; 
</Item>
<Item>
the Bangor site: 
<URL>http://www.maths.bangor.ac.uk/chda/&UTILSHTMLFILENAME;</URL>;
</Item>
</List> 
<Index>repository</Index> 
The package also has a GitHub repository: 
<URL>https://github.com/gap-packages/utils</URL>. 
<P/> 
Once the package is loaded, the manual <Code>doc/manual.pdf</Code> 
can be found in the documentation folder. 
The <Code>html</Code> versions, with or without MathJax, 
may be rebuilt as follows: 
<P/>
<Example>
<![CDATA[
gap> ReadPackage( "utils", "makedocrel.g" ); 
]]>
</Example>
<P/>
It is possible to check that the package has been installed correctly
by running the test files: 
<P/>
<Example>
<![CDATA[
gap> ReadPackage( "utils", "tst/testall.g" );
#I  Testing .../pkg/utils/tst/lists.tst 
... 
]]>
</Example>
<P/>
Additional information can be found on the
<E>Computational Higher-dimensional Discrete Algebra</E> website at
<URL>http://pages.bangor.ac.uk/~mas023/chda/</URL>. 


<Section Label="sect-current-procedure"> 
<Heading>The current transfer procedure</Heading> 

We consider here the process for transferring utility functions 
from an existing package (the &Home; package, say) to &Utils;. 
<P/>
If the functions in &Home; all have names of the form 
<C>HOME_FunctionName</C> then, in &Utils;, these functions 
are likely to be renamed as <C>FunctionName</C> or something similar. 
In this case the problem of duplicate declarations does not arise. 
This is what has happened with transfers from the <Package>AutoDoc</Package> 
package. 
<P/>
The case where the function names are unchanged is more complicated. 
Initially we tried out a process which allowed repeated declarations and 
installations of the functions being transferred. 
This involved additions to the main library files <File>global.g</File> 
and <File>oper.g</File>. 
Since there were misgivings about interfering in this way 
with basic operations such as <C>BIND_GLOBAL</C>, 
a simpler (but slightly less convenient) process has been adopted. 
<P/> 
Using an alternative procedure, the following steps are proposed 
when making transfers from &Home; to &Utils;. 
<Enum>
<Item>
(&Home;:)
Offer functions for inclusion. 
This may be simply done by emailing a list of functions. 
More usefully, email the declaration, implementation, test and 
documentation files, e.g.: <File>home.gd</File>, 
<File>home.gi</File>, <File>home.tst</File> and <File>home.xml</File>, 
</Item>
<Item>
(&Home;:)
Declare that <B>m.n</B> is the last version of &Home; 
to contain these functions. 
</Item>
<Item>
(&Utils;:)
Add strings <A>"home"</A> and <A>"m.n"</A> to the list 
<C>UtilsPackageVersions</C> in the file <File>utils/lib/start.gd</File>. 
<Example>
<![CDATA[
UtilsPackageVersions := 
  [ "autodoc",     "2016.01.31", 
    "resclasses",  "4.1.9", 
    "home",        "m.n",
    ...,           ... 
  ];
]]>
</Example>
</Item>
<Item>
(&Utils;:)
Include the function declaration and implentation sections 
in suitable files, enclosed within a conditional clause of the form: 
<Example>
<![CDATA[
if OKtoReadFromUtils( "Home" ) then
. . . . . . 
 <the code> 
. . . . . . 
fi;
]]>
</Example> 
<Index>OKtoReadFromUtils</Index>
The function <C>OKtoReadFromUtils</C> returns <C>true</C> 
only if there is an installed version of &Home; 
and this version is greater than <B>m.n</B>. 
So, at this stage, <E>the copied code will not be read</E>. 
</Item>
<Item>
(&Utils;:)
Add the test and documentation material to the appropriate files. 
The copied code can be tested by temporarily moving &Home; away from 
&GAP;'s package directory. 
</Item>
<Item>
(&Utils;:)
Release a new version of &Utils;. 
</Item>
<Item>
(&Home;:)
Edit out the declarations and implementations of all the transferred functions. 
Edit or remove references to them in the manual and tests, 
and add a note to the manual that these functions have been transferred. 
Add  &Utils; to the list of &Home;'s required packages 
in <File>PackageInfo.g</File>. 
Release a new version of &Home;. 
</Item>
<Item>
(&Utils;:) 
In due course, when the new version(s) of &Home; are well established, 
it may be possible to remove the conditional clauses mentioned in item 4 above. 
</Item>
</Enum>  

<P/> 
A note on running the tests. 
As long as a function being transferred still exists in the &Home; package, 
the code will not be read from &Utils;. 
So, when the tests are run, it is necessary to <C>LoadPackage( "home" );</C> 
before the function is called. 
The file <File>testall.g</File> makes sure that all the necessary packages 
are loaded before the individual tests are called. 

</Section> 

</Chapter>
