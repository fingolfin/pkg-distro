<!-- ------------------------------------------------------------------- -->
<!--                                                                     -->
<!--  intro.xml            Utils documentation            Chris Wensley  -->
<!--                                                                     -->
<!--  Copyright (C) 2015-2016, The GAP Group                             --> 
<!--                                                                     -->
<!-- ------------------------------------------------------------------- -->

<?xml version="1.0" encoding="UTF-8"?> 

<Chapter Label="chap-intro">

<Heading>Introduction</Heading>

The &Utils; package provides a space for utility functions from a variety 
of &GAP; packages to be collected together into a single package. 
In this way it is hoped that they will become more visible 
to other package authors. 
This package was first distributed as part of the &GAP; 4.8.2 distribution. 
<P/> 

The package is loaded with the command
<Example>
<![CDATA[
gap> LoadPackage( "utils" ); 
]]>
</Example>
<P/>
Functions are currently being transferred from the following packages: 
<List>
<Item>
&ResClasses;;
</Item>
<Item>
&RCWA;;
</Item>
</List>
<P/>
Transfer is complete (for now) for functions from the following packages:
<List>
<Item>
&AutoDoc; (with function names changed);
</Item>
<Item>
&XMod;.
</Item>
</List>
<P/>

The package may be obtained as a compressed tar file or a .zip file 
<File>utils-version_number.tar.gz</File>
by ftp from one of the following sites: 
<List>
<Item>
the &Utils; GitHub release site: 
<URL>http://gap-packages.github.io/utils/</URL>. 
</Item>
<Item>
any &GAP; archive, e.g. 
<URL>http://www.gap-system.org/Packages/packages.html</URL>; 
</Item>
</List> 
<Index>repository</Index> 
The package also has a GitHub repository at: 
<URL>https://github.com/gap-packages/utils</URL>. 
<P/> 


Once the package is loaded, the manual <Code>doc/manual.pdf</Code> 
can be found in the documentation folder. 
The <Code>html</Code> versions, with or without MathJax, 
may be rebuilt as follows: 
<P/>
<Example>
<![CDATA[
gap> ReadPackage( "utils", "makedocrel.g" ); 
]]>
</Example>
<P/>
It is possible to check that the package has been installed correctly
by running the test files: 
<P/>
<Example>
<![CDATA[
gap> ReadPackage( "utils", "tst/testall.g" );
#I  Testing .../pkg/utils/tst/lists.tst 
... 
#I  No errors detected while testing package utils
]]>
</Example>
<P/>

Note that functions listed in this manual that are currently being 
transferred are only read from the source package &Home; (say), 
and so can only be used if &Home; has been previously loaded. 



<Section Label="sect-author-info"> 
<Heading>Information for package authors</Heading> 

A function (or collection of functions) is suitable for transfer 
from a package &Home; to &Utils; 
if the following conditions are satisfied. 
<List>
<Item>
The function is sufficiently non-specialised so that it might be of use 
to other authors.
</Item>
<Item>
The function does not depend on the remaining functions in &Home; 
</Item>
<Item>
The function does not do what can already be done with a &GAP; library function. 
</Item>
<Item>
Documentation of the function and test examples are available. 
</Item>
</List> 
<P/>

Authors of packages may be reluctant to let go of their utility functions. 
The following principles may help to reassure them. 
(Suggestions for more items here are welcome.) 

<List>
<Item> 
A function that has been transferred to &Utils; will not be changed 
without the approval of the original author. 
</Item>
<Item>
The current package maintainer has every intention of continuing 
to maintain &Utils;. 
In the event that this proves impossible, the &GAP; development team 
will surely find someone to take over. 
</Item>
<Item>
Function names will not be changed unless specifically requested by 
&Home;'s author(s) or unless they have the form 
<C>HOME_FunctionName</C>. 
</Item>
<Item>
In order to speed up the transfer process, only functions from one package
will be in transition at any given time.  
Hopefully a week or two will suffice for most packages. 
</Item>
<Item>
Any package author who transfers a function to &Utils; will become 
an author of &Utils;. 
</Item>
</List>


</Section> 


<Section Label="sect-current-procedure"> 
<Heading>The current transfer procedure</Heading> 

We consider here the process for transferring utility functions 
from a package &Home; to &Utils; which has to avoid the potential problem 
of duplicate declarations of a function causing loading problems in &GAP;. 
<P/>
If the functions in &Home; all have names of the form 
<C>HOME_FunctionName</C> then, in &Utils;, these functions 
are likely to be renamed as <C>FunctionName</C> or something similar. 
In this case the problem of duplicate declarations does not arise. 
This is what has happened with transfers from the <Package>AutoDoc</Package> 
package. 
<P/>
The case where the function names are unchanged is more complicated. 
Initially we tried out a process which allowed repeated declarations and 
installations of the functions being transferred. 
This involved additions to the main library files <File>global.g</File> 
and <File>oper.g</File>. 
Since there were misgivings about interfering in this way 
with basic operations such as <C>BIND_GLOBAL</C>, 
a simpler (but slightly less convenient) process has been adopted. 
<P/> 
Using this alternative procedure, the following steps will be followed 
when making transfers from &Home; to &Utils;. 

<Enum>
<Item>
(&Home;:)
Offer functions for inclusion. 
This may be simply done by emailing a list of functions. 
More usefully, email the declaration, implementation, test and 
documentation files, e.g.: <File>home.gd</File>, 
<File>home.gi</File>, <File>home.tst</File> and <File>home.xml</File>. 
</Item>
<Item>
(&Home;:)
Declare that <B>m.n</B> is the last version of &Home; 
to contain these functions, so that <B>m.n+1</B> (or similar) 
will be the first version of &Home; to have all these functions 
removed, and to specify &Utils; as a required package. 
</Item>
<Item>
(&Utils;:)
Add strings <A>"home"</A> and <A>"m.n"</A> to the list 
<C>UtilsPackageVersions</C> in the file <File>utils/lib/start.gd</File>. 
<Example>
<![CDATA[
UtilsPackageVersions := 
  [ "autodoc",     "2016.01.31", 
    "resclasses",  "4.2.5", 
    "home",        "m.n",
    ...,           ... 
  ];
]]>
</Example>
While the transfers are being made, it is essential that any new versions 
of &Home; should be tested with the latest version of &Utils; 
before they are released, so as to avoid loading failures.  
</Item>
<Item>
(&Utils;:)
Include the function declaration and implementation sections 
in suitable files, enclosed within a conditional clause of the form: 
<Example>
<![CDATA[
if OKtoReadFromUtils( "Home" ) then
. . . . . . 
 <the code> 
. . . . . . 
fi;
]]>
</Example> 
<Index>OKtoReadFromUtils</Index>
The function <C>OKtoReadFromUtils</C> returns <C>true</C> 
only if there is an installed version of &Home; 
and if this version is greater than <B>m.n</B>. 
So, at this stage, <E>the copied code will not be read</E>. 
</Item>
<Item>
(&Utils;:)
Add the test and documentation material to the appropriate files. 
The copied code can be tested by temporarily moving &Home; away from 
&GAP;'s package directory. 
</Item>
<Item>
(&Utils;:)
Release a new version of &Utils; containing all the transferred material. 
</Item>
<Item>
(&Home;:)
Edit out the declarations and implementations of all the transferred functions, 
and remove references to them in the manual and tests. 
Possibly add a note to the manual that these functions have been transferred. 
Add  &Utils; to the list of &Home;'s required packages 
in <File>PackageInfo.g</File>. 
Release a new version of &Home;. 
</Item>
<Item>
(&Utils;:) 
In due course, when the new version(s) of &Home; are well established, 
it may be safe to remove the conditional clauses mentioned in item 4 above. 
The entry for &Home; in <C>UtilsPackageLists</C> may then be removed. 
</Item>
</Enum>  

<P/> 
Finally, a note on the procedure for testing these functions. 
As long as a function being transferred still exists in the &Home; package, 
the code will not be read from &Utils;. 
So, when the tests are run, it is necessary to <C>LoadPackage("home")</C> 
before the function is called. 
The file <File>utils/tst/testall.g</File> makes sure that all the necessary 
packages are loaded before the individual tests are called. 

</Section> 

</Chapter>
