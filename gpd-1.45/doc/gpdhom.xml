<!-- ------------------------------------------------------------------- -->
<!--                                                                     -->
<!--  gpdhom.xml             Gpd documentation            Chris Wensley  -->
<!--                                                       & Emma Moore  -->
<!--  Copyright (C) 2000-2016, Emma Moore and Chris Wensley,             --> 
<!--  School of Computer Science, Bangor University, U.K.                --> 
<!--                                                                     -->
<!-- ------------------------------------------------------------------- -->

<?xml version="1.0" encoding="UTF-8"?>

<Chapter Label="chap-gpdhom">
<Heading>Homomorphisms of Groupoids</Heading>

A <E>homomorphism</E> <M>m</M> from a groupoid <M>G</M> to a groupoid <M>H</M>
consists of a map from the objects of <M>G</M> to those of <M>H</M>
together with a map from the elements of <M>G</M> to those of <M>H</M>
which is compatible with tail and head and which preserves multiplication: 
<Display>
m(g1 : o1 \to o2)*m(g2 : o2 \to o3) ~=~ m(g1*g2 : o1 \to o3).
</Display>
<P/>
Note that when a homomorphism is not injective on objects, 
the image of the source need not be a subgroupoid of the range.
A simple example of this is given by a homomorphism from the two-object,  
four-element groupoid with trivial group to the free group 
<M>\langle a \rangle</M> 
on one generator, when the image is <M>[1,a^n,a^{-n}]</M> 
for some <M>n>0</M>. 


<Section Label="sec-homsfrom">
<Heading>Homomorphisms from a connected groupoid</Heading>

<ManSection>
   <Oper Name="GroupoidHomomorphismFromSinglePiece"
         Arg="src, rng, hom, imobs, imrays" />
   <Func Name="GroupoidHomomorphism"
         Arg="args" />
   <Oper Name="InclusionMappingGroupoids"
         Arg="gpd, sgpd" />
   <Oper Name="IsomorphismNewObjects"
         Arg="src,objlist" />
   <Oper Name="IsomorphismStandardGroupoid"
         Arg="gpd,obs" />
<Description>
As usual, there are various homomorphism operations.
The basic construction is a homomorphism <M>\phi : G \to H</M> with <M>G</M> 
the direct product of a group and a complete graph. 
The homomorphism has attributes <C>Source</C>, <C>Range</C>, 
<C>ImagesOfObjects</C> and <C>RootGroupHomomorphism</C>. 
The input data consists of the source; the range; and 
<List>
<Item>
a homomorphism <C>hom</C> from the root group of <M>G</M> 
to that of <M>H</M>; 
</Item>
<Item>
a list <C>imobs</C> of the images of the objects of <M>G</M>;
</Item>
<Item>
a list <C>imrays</C> of the elements in the images of the rays of <M>G</M>, 
so that the image <M>\phi(r_i : o_1 \to o_i)</M> 
of the <M>i</M>-th ray is 
<C>(imrays[i]:imobs[1]</C><M>\to</M><C>imobs[i])</C>. 
</Item>
</List>
<P/>
The operation <C>IsomorphismNewObjects</C> returns the isomorphism from a groupoid to a groupoid with the same object group and rays but with a different set of objects. 
<P/>
The operation <C>IsomorphismStandardGroupoid(gpd,obs)</C> 
returns the isomorphism from a groupoid with rays to the groupoid of type 
<C>IsDirectProductWithCompleteGraph</C> on the given objects.
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> gend12 := [ (15,16,17,18,19,20), (15,20)(16,19)(17,18) ];; 
gap> d12 := Group( gend12 );; 
gap> Gd12 := Groupoid( d12, [-37,-36,-35,-34] );;
gap> SetName( d12, "d12" );  
gap> SetName( Gd12, "Gd12" );
gap> s3 := Subgroup( d12, [ (15,17,19)(16,18,20), (15,20)(16,19)(17,18) ] );;
gap> Gs3 := SubgroupoidByPieces( Gd12, [ [ s3, [-36,-35,-34] ] ] );;
gap> SetName( s3, "s3" );  
gap> SetName( Gs3, "Gs3" );
gap> gend8 := GeneratorsOfGroup( d8 );;
gap> imhd8 := [ ( ), (15,20)(16,19)(17,18) ];;
gap> hd8 := GroupHomomorphismByImages( d8, s3, gend8, imhd8 );;
gap> homd8 := GroupoidHomomorphism( Gd8, Gs3, hd8 ); 
groupoid homomorphism : Gd8 -> Gs3
[ [ GroupHomomorphismByImages( d8, s3, [ (1,2,3,4), (1,3) ], 
        [ (), (15,20)(16,19)(17,18) ] ), [ -36, -35, -34 ], [ (), (), () ] ] ]
gap> e2; ImageElm( homd8, e2 );
[(1,3) : -8 -> -7]
[(15,20)(16,19)(17,18) : -35 -> -34]
gap> incGs3 := InclusionMappingGroupoids( Gd12, Gs3 );; 
gap> ihomd8 := homd8 * incGs3;; 
gap> IsBijectiveOnObjects( ihomd8 );
false
gap> Display( ihomd8 );
  groupoid mapping: [ Gd8 ] -> [ Gd12 ]
 root homomorphism: [ [ (1,2,3,4), (1,3) ], [ (), (15,20)(16,19)(17,18) ] ]
 images of objects: [ -36, -35, -34 ]
image elts of rays: [ (), (), () ]
gap> e2; ImageElm( homd8, e2 );
[(1,3) : -8 -> -7]
[(15,20)(16,19)(17,18) : -35 -> -36]
gap> c6d := Subgroup( d12, [ (15,16,17,18,19,20) ] );;                        
gap> rays := [ (), (16,20)(17,19), (15,17)(18,20), (15,19)(16,18) ];;        
gap> Gc6d := SubgroupoidWithRays( Gd12, c6d, rays );                   
single piece groupoid with rays: < Group( [ (15,16,17,18,19,20) ] ), 
[ -37, -36, -35, -34 ], [ (), (16,20)(17,19), (15,17)(18,20), (15,19)(16,18) 
 ] >
gap> iso1 := IsomorphismNewObjects( Gd12, [-7,-6,-5,-4] );     
groupoid homomorphism : 
[ [ IdentityMapping( d12 ), [ -7, -6, -5, -4 ], [ (), (), (), () ] ] ]
gap> iso2 := IsomorphismStandardGroupoid( Gc6d, [-7,-6,-5,-4] );
groupoid homomorphism : 
[ [ IdentityMapping( Group( [ (15,16,17,18,19,20) ] ) ), [ -7, -6, -5, -4 ], 
      [ (), (), (), () ] ] ]
]]>
</Example>

</Section>


<Section Label="sec-homsto">
<Heading>Homomorphisms to a connected groupoid</Heading>

<ManSection>
   <Oper Name="HomomorphismToSinglePiece"
         Arg="src, rng, pieces" />
<Description>
When <M>G</M> is made up of two or more pieces, all of which get mapped 
to a connected groupoid, we have a <E>homomorphism to a single piece</E>. 
The third input parameter in this case is a list of the <C>PieceImages</C> 
of the individual homomorphisms <E>from</E> the single pieces. 
See section <Ref Sect="sec-mwohom"/> for the corresponding operation 
on homomorphisms of magmas with objects. 
<P/>
In the following example the source <C>V3</C> of <C>homV3</C> has three pieces, 
and one of the component homomorphisms is an <C>IdentityMapping</C> 
<Index Key="IdentityMapping"> <C>IdentityMapping</C> </Index>. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> hc6 := GroupHomomorphismByImages( c6, s3, 
>            [(5,6,7)(8,9)], [(15,16)(17,20)(18,19)] );;
gap> Fs3 := FullSubgroupoid( Gs3, [ -35 ] );; 
gap> SetName( Fs3, "Fs3" ); 
gap> homc6 := GroupoidHomomorphism( Gc6, Fs3, hc6 );;
gap> incFs3 := InclusionMappingGroupoids( Gs3, Fs3 );; 
gap> ihomc6 := homc6 * incFs3; 
groupoid homomorphism : Gc6 -> Gs3
[ [ GroupHomomorphismByImages( c6, s3, [ (5,6,7)(8,9) ], 
        [ (15,16)(17,20)(18,19) ] ), [ -35 ], [ () ] ] ]
gap> idGs3 := IdentityMapping( Gs3 );;
gap> V3 := ReplaceOnePieceInUnion( U3, 1, Gs3 ); 
groupoid with 3 pieces:
[ Gs3, Gd8, Gc6 ]
gap> images3 := [ PieceImages( idGs3 )[1], 
>                 PieceImages( homd8 )[1], 
>                 PieceImages( ihomc6 )[1] ];; 
gap> homV3 := HomomorphismToSinglePiece( V3, Gs3, images3 );; 
gap> Display( homV3 );         
homomorphism to single piece magma with pieces:
(1): [ Gs3 ] -> [ Gs3 ]
magma mapping: [ [ (15,17,19)(16,18,20), (15,20)(16,19)(17,18) ], 
  [ (15,17,19)(16,18,20), (15,20)(16,19)(17,18) ] ]
   object map: [ -36, -35, -34 ] -> [ -36, -35, -34 ]
(2): [ Gd8 ] -> [ Gs3 ]
magma mapping: [ [ (1,2,3,4), (1,3) ], [ (), (15,20)(16,19)(17,18) ] ]
   object map: [ -9, -8, -7 ] -> [ -36, -35, -34 ]
(3): [ Gc6 ] -> [ Gs3 ]
magma mapping: [ [ (5,6,7)(8,9) ], [ (15,16)(17,20)(18,19) ] ]
   object map: [ -6 ] -> [ -35 ]
]]>
</Example>

</Section>


<Section Label="sec-genhoms">
<Heading>Homomorphisms to more than one piece</Heading>

<ManSection>
   <Oper Name="HomomorphismByUnion"
         Arg="src, rng, homs" />
<Description>
As in section <Ref Sect="sec-hompieces"/>,  
when the range <M>H</M> has more than one connected component, 
a homomorphism is a union of homomorphisms, one for each piece. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> isoq8 := IsomorphismNewObjects( Gq8, [-38,-37] ); 
groupoid homomorphism : 
[ 
  [ IdentityMapping( q8 ), [ -38, -37 ], 
      [ <identity> of ..., <identity> of ... ] ] ]
gap> Gq8b := Range( isoq8 );; 
gap> SetName( Gq8b, "Gq8b" ); 
gap> V4 := UnionOfPieces( [ V3, Gq8 ] ); 
groupoid with 4 pieces:
[ Gs3, Gq8, Gd8, Gc6 ]
gap> SetName( V4, "V4" ); 
gap> Vs3q8b := UnionOfPieces( [ Gs3, Gq8b ] ); 
gap> SetName( Vs3q8b, "Vs3q8b" ); 
gap> hom4 := HomomorphismByUnion( V4, Vs3q8b, [ homV3, isoq8 ] );; 
gap> PiecesOfMapping( hom4 );
[ groupoid homomorphism : Gq8 -> Gq8b
    [ [ IdentityMapping( q8 ), [ -38, -37 ], 
          [ <identity> of ..., <identity> of ... ] ] ], 
  groupoid homomorphism : 
    [ [ IdentityMapping( s3 ), [ -36, -35, -34 ], [ (), (), () ] ], 
      [ GroupHomomorphismByImages( d8, s3, [ (1,2,3,4), (1,3) ], 
            [ (), (15,20)(16,19)(17,18) ] ), [ -36, -35, -34 ], 
          [ (), (), () ] ], 
      [ GroupHomomorphismByImages( c6, s3, [ (5,6,7)(8,9) ], 
            [ (15,16)(17,20)(18,19) ] ), [ -35 ], [ () ] ] ] ]
]]>
</Example>

</Section>


<Section Label="sec-autos">
<Heading>Groupoid automorphisms</Heading>

<ManSection>
   <Oper Name="GroupoidAutomorphismByObjectPerm"
         Arg="gpd, imobs" />
   <Oper Name="GroupoidAutomorphismByGroupAuto"
         Arg="gpd, gpauto" />
   <Oper Name="GroupoidAutomorphismByRayShifts"
         Arg="gpd, imrays" />
<Description>
We first describe automorphisms of a groupoid <M>G</M> 
where <M>G</M> is the direct product of a group <M>g</M> and a complete graph. 
The automorphism group is generated by three types of automorphism: 
<List>
<Item>
given a permutation <M>\pi</M> of the <M>n</M> objects, we define 
<M>\pi : G \to G,~ (o_i,g,o_j) \mapsto (o_{\pi i},g,o_{\pi j})</M>; 
</Item>
<Item>
given an automorphism <M>\alpha</M> of the root group <M>g</M>, we define 
<M>\alpha : G \to G,~ (o_i,g,o_j) \mapsto (o_i,\alpha g,o_j)</M>;  
</Item>
<Item>
given <M>L = [1,g_2,g_3,\ldots,g_n] \in g^n</M> we define 
<M>\theta_L : G \to G,~ (o_i,g,o_j) \mapsto (o_i,g_i^{-1}gg_j,o_j)</M> 
so that, in particular, for all <M>i</M> the rays <M>(r_i : o_1 \to o_i)</M> 
are shifted by <M>g_i\;</M>: they map to <M>(g_ir_i : o_1 \to o_i)</M>. 
</Item>
</List> 
<P/>
Notice, at the end of the following example, that the calculated inverse of 
<C>aut123</C> is <E>not</E> in fact the correct morphism. 
Hopefully this error can be corrected in the next release. 
<P/> 
</Description>
</ManSection>
<Example>
<![CDATA[
gap> a4 := Subgroup( s4, [(1,2,3),(2,3,4)] );; 
gap> SetName( a4, "a4" ); 
gap> gensa4 := GeneratorsOfGroup( a4 );; 
gap> Ga4 := SubgroupoidByPieces( Gs4, [ [a4, [-15,-13,-11]] ] ); 
single piece groupoid: < a4, [ -15, -13, -11 ] >
gap> SetName( Ga4, "Ga4" ); 
gap> aut1 := GroupoidAutomorphismByObjectPerm( Ga4, [-13,-11,-15] );; 
gap> Display( aut1 ); 
  groupoid mapping: [ Ga4 ] -> [ Ga4 ]
 root homomorphism: [ [ (1,2,3), (2,3,4) ], [ (1,2,3), (2,3,4) ] ]
 images of objects: [ -13, -11, -15 ]
image elts of rays: [ (), (), () ]
gap> h2 := GroupHomomorphismByImages( a4, a4, gensa4, [(2,3,4), (1,3,4)] );; 
gap> aut2 := GroupoidAutomorphismByGroupAuto( Ga4, h2 );; 
gap> Display( aut2 ); 
  groupoid mapping: [ Ga4 ] -> [ Ga4 ]
 root homomorphism: [ [ (1,2,3), (2,3,4) ], [ (2,3,4), (1,3,4) ] ]
 images of objects: [ -15, -13, -11 ]
image elts of rays: [ (), (), () ]
gap> im3 := [(), (1,3,2), (2,4,3)];; 
gap> aut3 := GroupoidAutomorphismByRayShifts( Ga4, im3 );; 
gap> Display( aut3 ); 
  groupoid mapping: [ Ga4 ] -> [ Ga4 ]
 root homomorphism: [ [ (1,2,3), (2,3,4) ], [ (1,2,3), (2,3,4) ] ]
 images of objects: [ -15, -13, -11 ]
image elts of rays: [ (), (1,3,2), (2,4,3) ]
gap> aut123 := aut1*aut2*aut3;; 
gap> Display( aut123 ); 
  groupoid mapping: [ Ga4 ] -> [ Ga4 ]
 root homomorphism: [ [ (1,2,3), (2,3,4) ], [ (2,3,4), (1,3,4) ] ]
 images of objects: [ -13, -11, -15 ]
image elts of rays: [ (), (1,4,3), (1,2,3) ]
gap> inv123a := InverseGeneralMapping( aut123 );; 
gap> Display( inv123a ); 
  groupoid mapping: [ Ga4 ] -> [ Ga4 ]
 root homomorphism: [ [ (2,3,4), (1,3,4) ], [ (1,2,3), (2,3,4) ] ]
 images of objects: [ -11, -15, -13 ]
image elts of rays: [ (), (1,2,4), (1,3,4) ]
gap> inv1 := InverseGeneralMapping( aut1 );; 
gap> inv2 := InverseGeneralMapping( aut2 );; 
gap> inv3 := InverseGeneralMapping( aut3 );;
gap> inv123b := inv3*inv2*inv1;;
gap> Display( inv123b ); 
  groupoid mapping: [ Ga4 ] -> [ Ga4 ]
 root homomorphism: [ [ (1,2,3), (2,3,4) ], [ (1,2,4), (1,2,3) ] ]
 images of objects: [ -11, -15, -13 ]
image elts of rays: [ (), (1,2,4), (1,2,3) ]
gap> ok := inv123a = inv123b;
false
]]>
</Example>

<Subsection Label="subsec-autos-with-rays">
<Heading>Automorphisms of a groupoid with rays</Heading>

If <M>S</M> is a wide subgroupoid with rays of a standard groupoid <M>G</M> 
then an automorphism <M>\alpha</M> of <M>G</M> may map <M>S</M> 
to a different subgroupoid. 
When <M>\alpha</M> is a <C>GroupoidAutomorphismByObjectPerm</C>, 
then it restricts to an automorphism of <M>S</M> provided the objects 
in each orbit have the same ray elements. 
<P/>
This subsection needs to be expanded and examples added. 

</Subsection>


<ManSection>
   <Oper Name="AutomorphismGroupOfGroupoid"
         Arg="gpd" />
   <Oper Name="NiceObjectAutoGroupGroupoid"
         Arg="gpd" />
<Description>

The <Index Key="AutomorphismGroup"> <C>AutomorphismGroup</C> </Index> 
<C>AutomorphismGroup</C> of <M>G</M> is isomorphic to the quotient of 
<M>S_n \times A \times g^n</M> by a subgroup isomorphic to <M>g</M>, 
where <M>A</M> is the automorphism group of <M>g</M> 
and <M>S_n</M> is the symmetric group on the <M>n</M> objects. 
This is one of the main topics in <Cite Key="AlWe" />. 
<P/>
The current implementation is experimental, producing a 
<E>nice monomorphism</E> from  the automorphism group to a pc-group, 
if one is available.  
However <C>ImageElm</C> at present only works on generating elements.  
<P/> 
</Description>
</ManSection>
<Example>
<![CDATA[
gap> AGa4 := AutomorphismGroupOfGroupoid( Ga4 ); 
<group with 8 generators>
gap> Print( GeneratorsOfGroup( AGa4 ), "\n" ); 
[ groupoid homomorphism : Ga4 -> Ga4
    [ [ ConjugatorAutomorphism( a4, (2,4,3) ), [ -15, -13, -11 ], 
          [ (), (), () ] ] ], groupoid homomorphism : Ga4 -> Ga4
    [ [ ConjugatorAutomorphism( a4, (1,2) ), [ -15, -13, -11 ], 
          [ (), (), () ] ] ], groupoid homomorphism : Ga4 -> Ga4
    [ [ InnerAutomorphism( a4, () ), [ -13, -11, -15 ], [ (), (), () ] ] ], 
  groupoid homomorphism : Ga4 -> Ga4
    [ [ InnerAutomorphism( a4, () ), [ -13, -15, -11 ], [ (), (), () ] ] ], 
  groupoid homomorphism : Ga4 -> Ga4
    [ [ IdentityMapping( a4 ), [ -15, -13, -11 ], [ (), (1,2,3), () ] ] ], 
  groupoid homomorphism : Ga4 -> Ga4
    [ [ IdentityMapping( a4 ), [ -15, -13, -11 ], [ (), (2,3,4), () ] ] ], 
  groupoid homomorphism : Ga4 -> Ga4
    [ [ IdentityMapping( a4 ), [ -15, -13, -11 ], [ (), (), (1,2,3) ] ] ], 
  groupoid homomorphism : Ga4 -> Ga4
    [ [ IdentityMapping( a4 ), [ -15, -13, -11 ], [ (), (), (2,3,4) ] ] ] ]
gap> NGa4 := NiceObject( AGa4 ); 
Group([ f6, f3, f11*f12, f12, f2, f1, f4*f9, f4^2, f5*f9*f10*f11*f12, f5^2 ])
gap> MGa4 := NiceMonomorphism( AGa4 );; 
gap> Size( AGa4 ); 
20736
gap> SetName( AGa4, "AGa4" ); 
gap> SetName( NGa4, "NGa4" ); 
gap> Print( Image( MGa4 ), "\n" ); 
Group( [ f4*f5*f6, f3*f9*f10*f11, f2, f1*f2, f5*f11, f5^2, f4*f9, f4^2 ] )
gap> ##  Now do some tests!
gap> mgi := MappingGeneratorsImages( MGa4 );; 
gap> autgen := mgi[1];; 
gap> pcgen := mgi[2];;
gap> ngen := Length( autgen );; 
gap> ForAll( [1..ngen], i -> Order(autgen[i]) = Order(pcgen[i]) ); 
true 
]]>
</Example>

<ManSection>
   <Oper Name="GroupoidAutomorphismByGroupAutos"
         Arg="gpd, auts" />
<Description>
Homogeneous, discrete groupoids are the second type of groupoid for which a method is provided for <C>AutomorphismGroupOfGroupoid</C>. 
This is used in the <Package>XMod</Package> package for constructing 
crossed modules of groupoids. 
The two types of generating automorphism are 
<C>GroupoidAutomorphismByGroupAutos</C>, which requires a list 
of group automorphisms, one for each object group, 
and <C>GroupoidAutomorphismByObjectPerm</C>, which permutes the objects.  
<P/> 
</Description>
</ManSection>
<Example>
<![CDATA[
gap> Hs3 := HomogeneousDiscreteGroupoid( s3, [ -13..-10] ); 
homogeneous, discrete groupoid: < s3, [ -13 .. -10 ] >
gap> aut4 := GroupoidAutomorphismByObjectPerm( Hs3, [-12,-10,-11,-13] ); 
groupoid homomorphism : morphism from a homogeneous discrete groupoid:
[ -13, -12, -11, -10 ] -> [ -12, -10, -11, -13 ]
object homomorphisms:
IdentityMapping( s3 )
IdentityMapping( s3 )
IdentityMapping( s3 )
IdentityMapping( s3 )
gap> gens3 := GeneratorsOfGroup( s3 );; 
gap> g1 := gens3[1];; 
gap> g2 := gens3[2];; 
gap> b1 := GroupHomomorphismByImages( s3, s3, gens3, [ g1, g2^g1 ] );; 
gap> b2 := GroupHomomorphismByImages( s3, s3, gens3, [ g1^g2, g2 ] );; 
gap> b3 := GroupHomomorphismByImages( s3, s3, gens3, [ g1^g2, g2^(g1*g2) ] );; 
gap> b4 := GroupHomomorphismByImages( s3, s3, gens3, [ g1^(g2*g1), g2^g1 ] );; 
gap> aut5 := GroupoidAutomorphismByGroupAutos( Hs3, [b1,b2,b3,b4] ); 
groupoid homomorphism : morphism from a homogeneous discrete groupoid:
[ -13, -12, -11, -10 ] -> [ -13, -12, -11, -10 ]
object homomorphisms:
GroupHomomorphismByImages( s3, s3, 
[ (15,17,19)(16,18,20), (15,20)(16,19)(17,18) ], 
[ (15,17,19)(16,18,20), (15,18)(16,17)(19,20) ] )
GroupHomomorphismByImages( s3, s3, 
[ (15,17,19)(16,18,20), (15,20)(16,19)(17,18) ], 
[ (15,19,17)(16,20,18), (15,20)(16,19)(17,18) ] )
GroupHomomorphismByImages( s3, s3, 
[ (15,17,19)(16,18,20), (15,20)(16,19)(17,18) ], 
[ (15,19,17)(16,20,18), (15,16)(17,20)(18,19) ] )
GroupHomomorphismByImages( s3, s3, 
[ (15,17,19)(16,18,20), (15,20)(16,19)(17,18) ], 
[ (15,19,17)(16,20,18), (15,18)(16,17)(19,20) ] )
gap> AHs3 := AutomorphismGroupOfGroupoid( Hs3 );
<group of size 31104 with 4 generators>
gap> GeneratorsOfGroup( AHs3 )[2];
groupoid homomorphism : morphism from a homogeneous discrete groupoid:
[ -13, -12, -11, -10 ] -> [ -13, -12, -11, -10 ]
object homomorphisms:
ConjugatorAutomorphism( s3, (15,19,17)(16,20,18) )
IdentityMapping( s3 )
IdentityMapping( s3 )
IdentityMapping( s3 )
]]>
</Example>
<P/>


<ManSection>
   <Attr Name="RootGroupHomomorphism"
         Arg="gpdhom" />
   <Oper Name="ObjectGroupHomomorphism"
         Arg="gpdhom, obj" />
<Description>
A homomorphism from a single piece groupoid has one further attribute, 
namely <C>RootGroupHomomorphism</C>.  
This is the group homomorphism from the root group of the source 
to the object group at the image object in the range. 
Similarly, the group homomorphism from an object group of the source 
to the object group at the image object in the range is given by 
<C>ObjectGroupHomomorphism</C>.  
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> RootGroupHomomorphism( aut123 );
[ (1,2,3), (2,3,4) ] -> [ (2,3,4), (1,3,4) ]
gap> ObjectGroupHomomorphism( aut123, -13 );
[ (1,2,3), (2,3,4) ] -> [ (1,3,2), (1,3,4) ]
]]>
</Example>

</Section>

</Chapter>
